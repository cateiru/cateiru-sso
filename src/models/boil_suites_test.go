// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Brands", testBrands)
	t.Run("BroadcastEntries", testBroadcastEntries)
	t.Run("BroadcastNotices", testBroadcastNotices)
	t.Run("CertificateSessions", testCertificateSessions)
	t.Run("Clients", testClients)
	t.Run("ClientAllowRules", testClientAllowRules)
	t.Run("ClientRedirects", testClientRedirects)
	t.Run("ClientReferrers", testClientReferrers)
	t.Run("ClientRefreshes", testClientRefreshes)
	t.Run("ClientScopes", testClientScopes)
	t.Run("ClientSessions", testClientSessions)
	t.Run("EmailVerifySessions", testEmailVerifySessions)
	t.Run("InviteOrgSessions", testInviteOrgSessions)
	t.Run("LoginClientHistories", testLoginClientHistories)
	t.Run("LoginHistories", testLoginHistories)
	t.Run("LoginTryHistories", testLoginTryHistories)
	t.Run("OauthSessions", testOauthSessions)
	t.Run("Organizations", testOrganizations)
	t.Run("OrganizationUsers", testOrganizationUsers)
	t.Run("Otps", testOtps)
	t.Run("OtpBackups", testOtpBackups)
	t.Run("OtpSessions", testOtpSessions)
	t.Run("Passwords", testPasswords)
	t.Run("Refreshes", testRefreshes)
	t.Run("RegisterOtpSessions", testRegisterOtpSessions)
	t.Run("RegisterSessions", testRegisterSessions)
	t.Run("ReregistrationPasswordSessions", testReregistrationPasswordSessions)
	t.Run("Sessions", testSessions)
	t.Run("Settings", testSettings)
	t.Run("Staffs", testStaffs)
	t.Run("Users", testUsers)
	t.Run("UserBrands", testUserBrands)
	t.Run("Webauthns", testWebauthns)
	t.Run("WebauthnSessions", testWebauthnSessions)
}

func TestDelete(t *testing.T) {
	t.Run("Brands", testBrandsDelete)
	t.Run("BroadcastEntries", testBroadcastEntriesDelete)
	t.Run("BroadcastNotices", testBroadcastNoticesDelete)
	t.Run("CertificateSessions", testCertificateSessionsDelete)
	t.Run("Clients", testClientsDelete)
	t.Run("ClientAllowRules", testClientAllowRulesDelete)
	t.Run("ClientRedirects", testClientRedirectsDelete)
	t.Run("ClientReferrers", testClientReferrersDelete)
	t.Run("ClientRefreshes", testClientRefreshesDelete)
	t.Run("ClientScopes", testClientScopesDelete)
	t.Run("ClientSessions", testClientSessionsDelete)
	t.Run("EmailVerifySessions", testEmailVerifySessionsDelete)
	t.Run("InviteOrgSessions", testInviteOrgSessionsDelete)
	t.Run("LoginClientHistories", testLoginClientHistoriesDelete)
	t.Run("LoginHistories", testLoginHistoriesDelete)
	t.Run("LoginTryHistories", testLoginTryHistoriesDelete)
	t.Run("OauthSessions", testOauthSessionsDelete)
	t.Run("Organizations", testOrganizationsDelete)
	t.Run("OrganizationUsers", testOrganizationUsersDelete)
	t.Run("Otps", testOtpsDelete)
	t.Run("OtpBackups", testOtpBackupsDelete)
	t.Run("OtpSessions", testOtpSessionsDelete)
	t.Run("Passwords", testPasswordsDelete)
	t.Run("Refreshes", testRefreshesDelete)
	t.Run("RegisterOtpSessions", testRegisterOtpSessionsDelete)
	t.Run("RegisterSessions", testRegisterSessionsDelete)
	t.Run("ReregistrationPasswordSessions", testReregistrationPasswordSessionsDelete)
	t.Run("Sessions", testSessionsDelete)
	t.Run("Settings", testSettingsDelete)
	t.Run("Staffs", testStaffsDelete)
	t.Run("Users", testUsersDelete)
	t.Run("UserBrands", testUserBrandsDelete)
	t.Run("Webauthns", testWebauthnsDelete)
	t.Run("WebauthnSessions", testWebauthnSessionsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Brands", testBrandsQueryDeleteAll)
	t.Run("BroadcastEntries", testBroadcastEntriesQueryDeleteAll)
	t.Run("BroadcastNotices", testBroadcastNoticesQueryDeleteAll)
	t.Run("CertificateSessions", testCertificateSessionsQueryDeleteAll)
	t.Run("Clients", testClientsQueryDeleteAll)
	t.Run("ClientAllowRules", testClientAllowRulesQueryDeleteAll)
	t.Run("ClientRedirects", testClientRedirectsQueryDeleteAll)
	t.Run("ClientReferrers", testClientReferrersQueryDeleteAll)
	t.Run("ClientRefreshes", testClientRefreshesQueryDeleteAll)
	t.Run("ClientScopes", testClientScopesQueryDeleteAll)
	t.Run("ClientSessions", testClientSessionsQueryDeleteAll)
	t.Run("EmailVerifySessions", testEmailVerifySessionsQueryDeleteAll)
	t.Run("InviteOrgSessions", testInviteOrgSessionsQueryDeleteAll)
	t.Run("LoginClientHistories", testLoginClientHistoriesQueryDeleteAll)
	t.Run("LoginHistories", testLoginHistoriesQueryDeleteAll)
	t.Run("LoginTryHistories", testLoginTryHistoriesQueryDeleteAll)
	t.Run("OauthSessions", testOauthSessionsQueryDeleteAll)
	t.Run("Organizations", testOrganizationsQueryDeleteAll)
	t.Run("OrganizationUsers", testOrganizationUsersQueryDeleteAll)
	t.Run("Otps", testOtpsQueryDeleteAll)
	t.Run("OtpBackups", testOtpBackupsQueryDeleteAll)
	t.Run("OtpSessions", testOtpSessionsQueryDeleteAll)
	t.Run("Passwords", testPasswordsQueryDeleteAll)
	t.Run("Refreshes", testRefreshesQueryDeleteAll)
	t.Run("RegisterOtpSessions", testRegisterOtpSessionsQueryDeleteAll)
	t.Run("RegisterSessions", testRegisterSessionsQueryDeleteAll)
	t.Run("ReregistrationPasswordSessions", testReregistrationPasswordSessionsQueryDeleteAll)
	t.Run("Sessions", testSessionsQueryDeleteAll)
	t.Run("Settings", testSettingsQueryDeleteAll)
	t.Run("Staffs", testStaffsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
	t.Run("UserBrands", testUserBrandsQueryDeleteAll)
	t.Run("Webauthns", testWebauthnsQueryDeleteAll)
	t.Run("WebauthnSessions", testWebauthnSessionsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Brands", testBrandsSliceDeleteAll)
	t.Run("BroadcastEntries", testBroadcastEntriesSliceDeleteAll)
	t.Run("BroadcastNotices", testBroadcastNoticesSliceDeleteAll)
	t.Run("CertificateSessions", testCertificateSessionsSliceDeleteAll)
	t.Run("Clients", testClientsSliceDeleteAll)
	t.Run("ClientAllowRules", testClientAllowRulesSliceDeleteAll)
	t.Run("ClientRedirects", testClientRedirectsSliceDeleteAll)
	t.Run("ClientReferrers", testClientReferrersSliceDeleteAll)
	t.Run("ClientRefreshes", testClientRefreshesSliceDeleteAll)
	t.Run("ClientScopes", testClientScopesSliceDeleteAll)
	t.Run("ClientSessions", testClientSessionsSliceDeleteAll)
	t.Run("EmailVerifySessions", testEmailVerifySessionsSliceDeleteAll)
	t.Run("InviteOrgSessions", testInviteOrgSessionsSliceDeleteAll)
	t.Run("LoginClientHistories", testLoginClientHistoriesSliceDeleteAll)
	t.Run("LoginHistories", testLoginHistoriesSliceDeleteAll)
	t.Run("LoginTryHistories", testLoginTryHistoriesSliceDeleteAll)
	t.Run("OauthSessions", testOauthSessionsSliceDeleteAll)
	t.Run("Organizations", testOrganizationsSliceDeleteAll)
	t.Run("OrganizationUsers", testOrganizationUsersSliceDeleteAll)
	t.Run("Otps", testOtpsSliceDeleteAll)
	t.Run("OtpBackups", testOtpBackupsSliceDeleteAll)
	t.Run("OtpSessions", testOtpSessionsSliceDeleteAll)
	t.Run("Passwords", testPasswordsSliceDeleteAll)
	t.Run("Refreshes", testRefreshesSliceDeleteAll)
	t.Run("RegisterOtpSessions", testRegisterOtpSessionsSliceDeleteAll)
	t.Run("RegisterSessions", testRegisterSessionsSliceDeleteAll)
	t.Run("ReregistrationPasswordSessions", testReregistrationPasswordSessionsSliceDeleteAll)
	t.Run("Sessions", testSessionsSliceDeleteAll)
	t.Run("Settings", testSettingsSliceDeleteAll)
	t.Run("Staffs", testStaffsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
	t.Run("UserBrands", testUserBrandsSliceDeleteAll)
	t.Run("Webauthns", testWebauthnsSliceDeleteAll)
	t.Run("WebauthnSessions", testWebauthnSessionsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Brands", testBrandsExists)
	t.Run("BroadcastEntries", testBroadcastEntriesExists)
	t.Run("BroadcastNotices", testBroadcastNoticesExists)
	t.Run("CertificateSessions", testCertificateSessionsExists)
	t.Run("Clients", testClientsExists)
	t.Run("ClientAllowRules", testClientAllowRulesExists)
	t.Run("ClientRedirects", testClientRedirectsExists)
	t.Run("ClientReferrers", testClientReferrersExists)
	t.Run("ClientRefreshes", testClientRefreshesExists)
	t.Run("ClientScopes", testClientScopesExists)
	t.Run("ClientSessions", testClientSessionsExists)
	t.Run("EmailVerifySessions", testEmailVerifySessionsExists)
	t.Run("InviteOrgSessions", testInviteOrgSessionsExists)
	t.Run("LoginClientHistories", testLoginClientHistoriesExists)
	t.Run("LoginHistories", testLoginHistoriesExists)
	t.Run("LoginTryHistories", testLoginTryHistoriesExists)
	t.Run("OauthSessions", testOauthSessionsExists)
	t.Run("Organizations", testOrganizationsExists)
	t.Run("OrganizationUsers", testOrganizationUsersExists)
	t.Run("Otps", testOtpsExists)
	t.Run("OtpBackups", testOtpBackupsExists)
	t.Run("OtpSessions", testOtpSessionsExists)
	t.Run("Passwords", testPasswordsExists)
	t.Run("Refreshes", testRefreshesExists)
	t.Run("RegisterOtpSessions", testRegisterOtpSessionsExists)
	t.Run("RegisterSessions", testRegisterSessionsExists)
	t.Run("ReregistrationPasswordSessions", testReregistrationPasswordSessionsExists)
	t.Run("Sessions", testSessionsExists)
	t.Run("Settings", testSettingsExists)
	t.Run("Staffs", testStaffsExists)
	t.Run("Users", testUsersExists)
	t.Run("UserBrands", testUserBrandsExists)
	t.Run("Webauthns", testWebauthnsExists)
	t.Run("WebauthnSessions", testWebauthnSessionsExists)
}

func TestFind(t *testing.T) {
	t.Run("Brands", testBrandsFind)
	t.Run("BroadcastEntries", testBroadcastEntriesFind)
	t.Run("BroadcastNotices", testBroadcastNoticesFind)
	t.Run("CertificateSessions", testCertificateSessionsFind)
	t.Run("Clients", testClientsFind)
	t.Run("ClientAllowRules", testClientAllowRulesFind)
	t.Run("ClientRedirects", testClientRedirectsFind)
	t.Run("ClientReferrers", testClientReferrersFind)
	t.Run("ClientRefreshes", testClientRefreshesFind)
	t.Run("ClientScopes", testClientScopesFind)
	t.Run("ClientSessions", testClientSessionsFind)
	t.Run("EmailVerifySessions", testEmailVerifySessionsFind)
	t.Run("InviteOrgSessions", testInviteOrgSessionsFind)
	t.Run("LoginClientHistories", testLoginClientHistoriesFind)
	t.Run("LoginHistories", testLoginHistoriesFind)
	t.Run("LoginTryHistories", testLoginTryHistoriesFind)
	t.Run("OauthSessions", testOauthSessionsFind)
	t.Run("Organizations", testOrganizationsFind)
	t.Run("OrganizationUsers", testOrganizationUsersFind)
	t.Run("Otps", testOtpsFind)
	t.Run("OtpBackups", testOtpBackupsFind)
	t.Run("OtpSessions", testOtpSessionsFind)
	t.Run("Passwords", testPasswordsFind)
	t.Run("Refreshes", testRefreshesFind)
	t.Run("RegisterOtpSessions", testRegisterOtpSessionsFind)
	t.Run("RegisterSessions", testRegisterSessionsFind)
	t.Run("ReregistrationPasswordSessions", testReregistrationPasswordSessionsFind)
	t.Run("Sessions", testSessionsFind)
	t.Run("Settings", testSettingsFind)
	t.Run("Staffs", testStaffsFind)
	t.Run("Users", testUsersFind)
	t.Run("UserBrands", testUserBrandsFind)
	t.Run("Webauthns", testWebauthnsFind)
	t.Run("WebauthnSessions", testWebauthnSessionsFind)
}

func TestBind(t *testing.T) {
	t.Run("Brands", testBrandsBind)
	t.Run("BroadcastEntries", testBroadcastEntriesBind)
	t.Run("BroadcastNotices", testBroadcastNoticesBind)
	t.Run("CertificateSessions", testCertificateSessionsBind)
	t.Run("Clients", testClientsBind)
	t.Run("ClientAllowRules", testClientAllowRulesBind)
	t.Run("ClientRedirects", testClientRedirectsBind)
	t.Run("ClientReferrers", testClientReferrersBind)
	t.Run("ClientRefreshes", testClientRefreshesBind)
	t.Run("ClientScopes", testClientScopesBind)
	t.Run("ClientSessions", testClientSessionsBind)
	t.Run("EmailVerifySessions", testEmailVerifySessionsBind)
	t.Run("InviteOrgSessions", testInviteOrgSessionsBind)
	t.Run("LoginClientHistories", testLoginClientHistoriesBind)
	t.Run("LoginHistories", testLoginHistoriesBind)
	t.Run("LoginTryHistories", testLoginTryHistoriesBind)
	t.Run("OauthSessions", testOauthSessionsBind)
	t.Run("Organizations", testOrganizationsBind)
	t.Run("OrganizationUsers", testOrganizationUsersBind)
	t.Run("Otps", testOtpsBind)
	t.Run("OtpBackups", testOtpBackupsBind)
	t.Run("OtpSessions", testOtpSessionsBind)
	t.Run("Passwords", testPasswordsBind)
	t.Run("Refreshes", testRefreshesBind)
	t.Run("RegisterOtpSessions", testRegisterOtpSessionsBind)
	t.Run("RegisterSessions", testRegisterSessionsBind)
	t.Run("ReregistrationPasswordSessions", testReregistrationPasswordSessionsBind)
	t.Run("Sessions", testSessionsBind)
	t.Run("Settings", testSettingsBind)
	t.Run("Staffs", testStaffsBind)
	t.Run("Users", testUsersBind)
	t.Run("UserBrands", testUserBrandsBind)
	t.Run("Webauthns", testWebauthnsBind)
	t.Run("WebauthnSessions", testWebauthnSessionsBind)
}

func TestOne(t *testing.T) {
	t.Run("Brands", testBrandsOne)
	t.Run("BroadcastEntries", testBroadcastEntriesOne)
	t.Run("BroadcastNotices", testBroadcastNoticesOne)
	t.Run("CertificateSessions", testCertificateSessionsOne)
	t.Run("Clients", testClientsOne)
	t.Run("ClientAllowRules", testClientAllowRulesOne)
	t.Run("ClientRedirects", testClientRedirectsOne)
	t.Run("ClientReferrers", testClientReferrersOne)
	t.Run("ClientRefreshes", testClientRefreshesOne)
	t.Run("ClientScopes", testClientScopesOne)
	t.Run("ClientSessions", testClientSessionsOne)
	t.Run("EmailVerifySessions", testEmailVerifySessionsOne)
	t.Run("InviteOrgSessions", testInviteOrgSessionsOne)
	t.Run("LoginClientHistories", testLoginClientHistoriesOne)
	t.Run("LoginHistories", testLoginHistoriesOne)
	t.Run("LoginTryHistories", testLoginTryHistoriesOne)
	t.Run("OauthSessions", testOauthSessionsOne)
	t.Run("Organizations", testOrganizationsOne)
	t.Run("OrganizationUsers", testOrganizationUsersOne)
	t.Run("Otps", testOtpsOne)
	t.Run("OtpBackups", testOtpBackupsOne)
	t.Run("OtpSessions", testOtpSessionsOne)
	t.Run("Passwords", testPasswordsOne)
	t.Run("Refreshes", testRefreshesOne)
	t.Run("RegisterOtpSessions", testRegisterOtpSessionsOne)
	t.Run("RegisterSessions", testRegisterSessionsOne)
	t.Run("ReregistrationPasswordSessions", testReregistrationPasswordSessionsOne)
	t.Run("Sessions", testSessionsOne)
	t.Run("Settings", testSettingsOne)
	t.Run("Staffs", testStaffsOne)
	t.Run("Users", testUsersOne)
	t.Run("UserBrands", testUserBrandsOne)
	t.Run("Webauthns", testWebauthnsOne)
	t.Run("WebauthnSessions", testWebauthnSessionsOne)
}

func TestAll(t *testing.T) {
	t.Run("Brands", testBrandsAll)
	t.Run("BroadcastEntries", testBroadcastEntriesAll)
	t.Run("BroadcastNotices", testBroadcastNoticesAll)
	t.Run("CertificateSessions", testCertificateSessionsAll)
	t.Run("Clients", testClientsAll)
	t.Run("ClientAllowRules", testClientAllowRulesAll)
	t.Run("ClientRedirects", testClientRedirectsAll)
	t.Run("ClientReferrers", testClientReferrersAll)
	t.Run("ClientRefreshes", testClientRefreshesAll)
	t.Run("ClientScopes", testClientScopesAll)
	t.Run("ClientSessions", testClientSessionsAll)
	t.Run("EmailVerifySessions", testEmailVerifySessionsAll)
	t.Run("InviteOrgSessions", testInviteOrgSessionsAll)
	t.Run("LoginClientHistories", testLoginClientHistoriesAll)
	t.Run("LoginHistories", testLoginHistoriesAll)
	t.Run("LoginTryHistories", testLoginTryHistoriesAll)
	t.Run("OauthSessions", testOauthSessionsAll)
	t.Run("Organizations", testOrganizationsAll)
	t.Run("OrganizationUsers", testOrganizationUsersAll)
	t.Run("Otps", testOtpsAll)
	t.Run("OtpBackups", testOtpBackupsAll)
	t.Run("OtpSessions", testOtpSessionsAll)
	t.Run("Passwords", testPasswordsAll)
	t.Run("Refreshes", testRefreshesAll)
	t.Run("RegisterOtpSessions", testRegisterOtpSessionsAll)
	t.Run("RegisterSessions", testRegisterSessionsAll)
	t.Run("ReregistrationPasswordSessions", testReregistrationPasswordSessionsAll)
	t.Run("Sessions", testSessionsAll)
	t.Run("Settings", testSettingsAll)
	t.Run("Staffs", testStaffsAll)
	t.Run("Users", testUsersAll)
	t.Run("UserBrands", testUserBrandsAll)
	t.Run("Webauthns", testWebauthnsAll)
	t.Run("WebauthnSessions", testWebauthnSessionsAll)
}

func TestCount(t *testing.T) {
	t.Run("Brands", testBrandsCount)
	t.Run("BroadcastEntries", testBroadcastEntriesCount)
	t.Run("BroadcastNotices", testBroadcastNoticesCount)
	t.Run("CertificateSessions", testCertificateSessionsCount)
	t.Run("Clients", testClientsCount)
	t.Run("ClientAllowRules", testClientAllowRulesCount)
	t.Run("ClientRedirects", testClientRedirectsCount)
	t.Run("ClientReferrers", testClientReferrersCount)
	t.Run("ClientRefreshes", testClientRefreshesCount)
	t.Run("ClientScopes", testClientScopesCount)
	t.Run("ClientSessions", testClientSessionsCount)
	t.Run("EmailVerifySessions", testEmailVerifySessionsCount)
	t.Run("InviteOrgSessions", testInviteOrgSessionsCount)
	t.Run("LoginClientHistories", testLoginClientHistoriesCount)
	t.Run("LoginHistories", testLoginHistoriesCount)
	t.Run("LoginTryHistories", testLoginTryHistoriesCount)
	t.Run("OauthSessions", testOauthSessionsCount)
	t.Run("Organizations", testOrganizationsCount)
	t.Run("OrganizationUsers", testOrganizationUsersCount)
	t.Run("Otps", testOtpsCount)
	t.Run("OtpBackups", testOtpBackupsCount)
	t.Run("OtpSessions", testOtpSessionsCount)
	t.Run("Passwords", testPasswordsCount)
	t.Run("Refreshes", testRefreshesCount)
	t.Run("RegisterOtpSessions", testRegisterOtpSessionsCount)
	t.Run("RegisterSessions", testRegisterSessionsCount)
	t.Run("ReregistrationPasswordSessions", testReregistrationPasswordSessionsCount)
	t.Run("Sessions", testSessionsCount)
	t.Run("Settings", testSettingsCount)
	t.Run("Staffs", testStaffsCount)
	t.Run("Users", testUsersCount)
	t.Run("UserBrands", testUserBrandsCount)
	t.Run("Webauthns", testWebauthnsCount)
	t.Run("WebauthnSessions", testWebauthnSessionsCount)
}

func TestHooks(t *testing.T) {
	t.Run("Brands", testBrandsHooks)
	t.Run("BroadcastEntries", testBroadcastEntriesHooks)
	t.Run("BroadcastNotices", testBroadcastNoticesHooks)
	t.Run("CertificateSessions", testCertificateSessionsHooks)
	t.Run("Clients", testClientsHooks)
	t.Run("ClientAllowRules", testClientAllowRulesHooks)
	t.Run("ClientRedirects", testClientRedirectsHooks)
	t.Run("ClientReferrers", testClientReferrersHooks)
	t.Run("ClientRefreshes", testClientRefreshesHooks)
	t.Run("ClientScopes", testClientScopesHooks)
	t.Run("ClientSessions", testClientSessionsHooks)
	t.Run("EmailVerifySessions", testEmailVerifySessionsHooks)
	t.Run("InviteOrgSessions", testInviteOrgSessionsHooks)
	t.Run("LoginClientHistories", testLoginClientHistoriesHooks)
	t.Run("LoginHistories", testLoginHistoriesHooks)
	t.Run("LoginTryHistories", testLoginTryHistoriesHooks)
	t.Run("OauthSessions", testOauthSessionsHooks)
	t.Run("Organizations", testOrganizationsHooks)
	t.Run("OrganizationUsers", testOrganizationUsersHooks)
	t.Run("Otps", testOtpsHooks)
	t.Run("OtpBackups", testOtpBackupsHooks)
	t.Run("OtpSessions", testOtpSessionsHooks)
	t.Run("Passwords", testPasswordsHooks)
	t.Run("Refreshes", testRefreshesHooks)
	t.Run("RegisterOtpSessions", testRegisterOtpSessionsHooks)
	t.Run("RegisterSessions", testRegisterSessionsHooks)
	t.Run("ReregistrationPasswordSessions", testReregistrationPasswordSessionsHooks)
	t.Run("Sessions", testSessionsHooks)
	t.Run("Settings", testSettingsHooks)
	t.Run("Staffs", testStaffsHooks)
	t.Run("Users", testUsersHooks)
	t.Run("UserBrands", testUserBrandsHooks)
	t.Run("Webauthns", testWebauthnsHooks)
	t.Run("WebauthnSessions", testWebauthnSessionsHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Brands", testBrandsInsert)
	t.Run("Brands", testBrandsInsertWhitelist)
	t.Run("BroadcastEntries", testBroadcastEntriesInsert)
	t.Run("BroadcastEntries", testBroadcastEntriesInsertWhitelist)
	t.Run("BroadcastNotices", testBroadcastNoticesInsert)
	t.Run("BroadcastNotices", testBroadcastNoticesInsertWhitelist)
	t.Run("CertificateSessions", testCertificateSessionsInsert)
	t.Run("CertificateSessions", testCertificateSessionsInsertWhitelist)
	t.Run("Clients", testClientsInsert)
	t.Run("Clients", testClientsInsertWhitelist)
	t.Run("ClientAllowRules", testClientAllowRulesInsert)
	t.Run("ClientAllowRules", testClientAllowRulesInsertWhitelist)
	t.Run("ClientRedirects", testClientRedirectsInsert)
	t.Run("ClientRedirects", testClientRedirectsInsertWhitelist)
	t.Run("ClientReferrers", testClientReferrersInsert)
	t.Run("ClientReferrers", testClientReferrersInsertWhitelist)
	t.Run("ClientRefreshes", testClientRefreshesInsert)
	t.Run("ClientRefreshes", testClientRefreshesInsertWhitelist)
	t.Run("ClientScopes", testClientScopesInsert)
	t.Run("ClientScopes", testClientScopesInsertWhitelist)
	t.Run("ClientSessions", testClientSessionsInsert)
	t.Run("ClientSessions", testClientSessionsInsertWhitelist)
	t.Run("EmailVerifySessions", testEmailVerifySessionsInsert)
	t.Run("EmailVerifySessions", testEmailVerifySessionsInsertWhitelist)
	t.Run("InviteOrgSessions", testInviteOrgSessionsInsert)
	t.Run("InviteOrgSessions", testInviteOrgSessionsInsertWhitelist)
	t.Run("LoginClientHistories", testLoginClientHistoriesInsert)
	t.Run("LoginClientHistories", testLoginClientHistoriesInsertWhitelist)
	t.Run("LoginHistories", testLoginHistoriesInsert)
	t.Run("LoginHistories", testLoginHistoriesInsertWhitelist)
	t.Run("LoginTryHistories", testLoginTryHistoriesInsert)
	t.Run("LoginTryHistories", testLoginTryHistoriesInsertWhitelist)
	t.Run("OauthSessions", testOauthSessionsInsert)
	t.Run("OauthSessions", testOauthSessionsInsertWhitelist)
	t.Run("Organizations", testOrganizationsInsert)
	t.Run("Organizations", testOrganizationsInsertWhitelist)
	t.Run("OrganizationUsers", testOrganizationUsersInsert)
	t.Run("OrganizationUsers", testOrganizationUsersInsertWhitelist)
	t.Run("Otps", testOtpsInsert)
	t.Run("Otps", testOtpsInsertWhitelist)
	t.Run("OtpBackups", testOtpBackupsInsert)
	t.Run("OtpBackups", testOtpBackupsInsertWhitelist)
	t.Run("OtpSessions", testOtpSessionsInsert)
	t.Run("OtpSessions", testOtpSessionsInsertWhitelist)
	t.Run("Passwords", testPasswordsInsert)
	t.Run("Passwords", testPasswordsInsertWhitelist)
	t.Run("Refreshes", testRefreshesInsert)
	t.Run("Refreshes", testRefreshesInsertWhitelist)
	t.Run("RegisterOtpSessions", testRegisterOtpSessionsInsert)
	t.Run("RegisterOtpSessions", testRegisterOtpSessionsInsertWhitelist)
	t.Run("RegisterSessions", testRegisterSessionsInsert)
	t.Run("RegisterSessions", testRegisterSessionsInsertWhitelist)
	t.Run("ReregistrationPasswordSessions", testReregistrationPasswordSessionsInsert)
	t.Run("ReregistrationPasswordSessions", testReregistrationPasswordSessionsInsertWhitelist)
	t.Run("Sessions", testSessionsInsert)
	t.Run("Sessions", testSessionsInsertWhitelist)
	t.Run("Settings", testSettingsInsert)
	t.Run("Settings", testSettingsInsertWhitelist)
	t.Run("Staffs", testStaffsInsert)
	t.Run("Staffs", testStaffsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
	t.Run("UserBrands", testUserBrandsInsert)
	t.Run("UserBrands", testUserBrandsInsertWhitelist)
	t.Run("Webauthns", testWebauthnsInsert)
	t.Run("Webauthns", testWebauthnsInsertWhitelist)
	t.Run("WebauthnSessions", testWebauthnSessionsInsert)
	t.Run("WebauthnSessions", testWebauthnSessionsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("BroadcastNoticeToBroadcastEntryUsingEntry", testBroadcastNoticeToOneBroadcastEntryUsingEntry)
	t.Run("BroadcastNoticeToUserUsingUser", testBroadcastNoticeToOneUserUsingUser)
	t.Run("CertificateSessionToUserUsingUser", testCertificateSessionToOneUserUsingUser)
	t.Run("ClientToUserUsingOwnerUser", testClientToOneUserUsingOwnerUser)
	t.Run("ClientAllowRuleToClientUsingClient", testClientAllowRuleToOneClientUsingClient)
	t.Run("ClientRedirectToClientUsingClient", testClientRedirectToOneClientUsingClient)
	t.Run("ClientReferrerToClientUsingClient", testClientReferrerToOneClientUsingClient)
	t.Run("ClientRefreshToUserUsingUser", testClientRefreshToOneUserUsingUser)
	t.Run("ClientScopeToClientUsingClient", testClientScopeToOneClientUsingClient)
	t.Run("ClientSessionToUserUsingUser", testClientSessionToOneUserUsingUser)
	t.Run("EmailVerifySessionToUserUsingUser", testEmailVerifySessionToOneUserUsingUser)
	t.Run("InviteOrgSessionToOrganizationUsingOrg", testInviteOrgSessionToOneOrganizationUsingOrg)
	t.Run("LoginClientHistoryToClientUsingClient", testLoginClientHistoryToOneClientUsingClient)
	t.Run("LoginClientHistoryToUserUsingUser", testLoginClientHistoryToOneUserUsingUser)
	t.Run("LoginHistoryToUserUsingUser", testLoginHistoryToOneUserUsingUser)
	t.Run("LoginTryHistoryToUserUsingUser", testLoginTryHistoryToOneUserUsingUser)
	t.Run("OauthSessionToUserUsingUser", testOauthSessionToOneUserUsingUser)
	t.Run("OauthSessionToClientUsingClient", testOauthSessionToOneClientUsingClient)
	t.Run("OrganizationUserToOrganizationUsingOrganization", testOrganizationUserToOneOrganizationUsingOrganization)
	t.Run("OrganizationUserToUserUsingUser", testOrganizationUserToOneUserUsingUser)
	t.Run("OtpToUserUsingUser", testOtpToOneUserUsingUser)
	t.Run("OtpBackupToUserUsingUser", testOtpBackupToOneUserUsingUser)
	t.Run("OtpSessionToUserUsingUser", testOtpSessionToOneUserUsingUser)
	t.Run("PasswordToUserUsingUser", testPasswordToOneUserUsingUser)
	t.Run("RefreshToUserUsingUser", testRefreshToOneUserUsingUser)
	t.Run("RegisterOtpSessionToUserUsingUser", testRegisterOtpSessionToOneUserUsingUser)
	t.Run("SessionToUserUsingUser", testSessionToOneUserUsingUser)
	t.Run("SettingToUserUsingUser", testSettingToOneUserUsingUser)
	t.Run("StaffToUserUsingUser", testStaffToOneUserUsingUser)
	t.Run("UserBrandToUserUsingUser", testUserBrandToOneUserUsingUser)
	t.Run("UserBrandToBrandUsingBrand", testUserBrandToOneBrandUsingBrand)
	t.Run("WebauthnToUserUsingUser", testWebauthnToOneUserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {
	t.Run("UserToOtpUsingOtp", testUserOneToOneOtpUsingOtp)
	t.Run("UserToPasswordUsingPassword", testUserOneToOnePasswordUsingPassword)
	t.Run("UserToSettingUsingSetting", testUserOneToOneSettingUsingSetting)
	t.Run("UserToStaffUsingStaff", testUserOneToOneStaffUsingStaff)
}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("BrandToUserBrands", testBrandToManyUserBrands)
	t.Run("BroadcastEntryToEntryBroadcastNotices", testBroadcastEntryToManyEntryBroadcastNotices)
	t.Run("ClientToClientAllowRules", testClientToManyClientAllowRules)
	t.Run("ClientToClientRedirects", testClientToManyClientRedirects)
	t.Run("ClientToClientReferrers", testClientToManyClientReferrers)
	t.Run("ClientToClientScopes", testClientToManyClientScopes)
	t.Run("ClientToLoginClientHistories", testClientToManyLoginClientHistories)
	t.Run("ClientToOauthSessions", testClientToManyOauthSessions)
	t.Run("OrganizationToOrgInviteOrgSessions", testOrganizationToManyOrgInviteOrgSessions)
	t.Run("OrganizationToOrganizationUsers", testOrganizationToManyOrganizationUsers)
	t.Run("UserToBroadcastNotices", testUserToManyBroadcastNotices)
	t.Run("UserToCertificateSessions", testUserToManyCertificateSessions)
	t.Run("UserToOwnerUserClients", testUserToManyOwnerUserClients)
	t.Run("UserToClientRefreshes", testUserToManyClientRefreshes)
	t.Run("UserToClientSessions", testUserToManyClientSessions)
	t.Run("UserToEmailVerifySessions", testUserToManyEmailVerifySessions)
	t.Run("UserToLoginClientHistories", testUserToManyLoginClientHistories)
	t.Run("UserToLoginHistories", testUserToManyLoginHistories)
	t.Run("UserToLoginTryHistories", testUserToManyLoginTryHistories)
	t.Run("UserToOauthSessions", testUserToManyOauthSessions)
	t.Run("UserToOrganizationUsers", testUserToManyOrganizationUsers)
	t.Run("UserToOtpBackups", testUserToManyOtpBackups)
	t.Run("UserToOtpSessions", testUserToManyOtpSessions)
	t.Run("UserToRefreshes", testUserToManyRefreshes)
	t.Run("UserToRegisterOtpSessions", testUserToManyRegisterOtpSessions)
	t.Run("UserToSessions", testUserToManySessions)
	t.Run("UserToUserBrands", testUserToManyUserBrands)
	t.Run("UserToWebauthns", testUserToManyWebauthns)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("BroadcastNoticeToBroadcastEntryUsingEntryBroadcastNotices", testBroadcastNoticeToOneSetOpBroadcastEntryUsingEntry)
	t.Run("BroadcastNoticeToUserUsingBroadcastNotices", testBroadcastNoticeToOneSetOpUserUsingUser)
	t.Run("CertificateSessionToUserUsingCertificateSessions", testCertificateSessionToOneSetOpUserUsingUser)
	t.Run("ClientToUserUsingOwnerUserClients", testClientToOneSetOpUserUsingOwnerUser)
	t.Run("ClientAllowRuleToClientUsingClientAllowRules", testClientAllowRuleToOneSetOpClientUsingClient)
	t.Run("ClientRedirectToClientUsingClientRedirects", testClientRedirectToOneSetOpClientUsingClient)
	t.Run("ClientReferrerToClientUsingClientReferrers", testClientReferrerToOneSetOpClientUsingClient)
	t.Run("ClientRefreshToUserUsingClientRefreshes", testClientRefreshToOneSetOpUserUsingUser)
	t.Run("ClientScopeToClientUsingClientScopes", testClientScopeToOneSetOpClientUsingClient)
	t.Run("ClientSessionToUserUsingClientSessions", testClientSessionToOneSetOpUserUsingUser)
	t.Run("EmailVerifySessionToUserUsingEmailVerifySessions", testEmailVerifySessionToOneSetOpUserUsingUser)
	t.Run("InviteOrgSessionToOrganizationUsingOrgInviteOrgSessions", testInviteOrgSessionToOneSetOpOrganizationUsingOrg)
	t.Run("LoginClientHistoryToClientUsingLoginClientHistories", testLoginClientHistoryToOneSetOpClientUsingClient)
	t.Run("LoginClientHistoryToUserUsingLoginClientHistories", testLoginClientHistoryToOneSetOpUserUsingUser)
	t.Run("LoginHistoryToUserUsingLoginHistories", testLoginHistoryToOneSetOpUserUsingUser)
	t.Run("LoginTryHistoryToUserUsingLoginTryHistories", testLoginTryHistoryToOneSetOpUserUsingUser)
	t.Run("OauthSessionToUserUsingOauthSessions", testOauthSessionToOneSetOpUserUsingUser)
	t.Run("OauthSessionToClientUsingOauthSessions", testOauthSessionToOneSetOpClientUsingClient)
	t.Run("OrganizationUserToOrganizationUsingOrganizationUsers", testOrganizationUserToOneSetOpOrganizationUsingOrganization)
	t.Run("OrganizationUserToUserUsingOrganizationUsers", testOrganizationUserToOneSetOpUserUsingUser)
	t.Run("OtpToUserUsingOtp", testOtpToOneSetOpUserUsingUser)
	t.Run("OtpBackupToUserUsingOtpBackups", testOtpBackupToOneSetOpUserUsingUser)
	t.Run("OtpSessionToUserUsingOtpSessions", testOtpSessionToOneSetOpUserUsingUser)
	t.Run("PasswordToUserUsingPassword", testPasswordToOneSetOpUserUsingUser)
	t.Run("RefreshToUserUsingRefreshes", testRefreshToOneSetOpUserUsingUser)
	t.Run("RegisterOtpSessionToUserUsingRegisterOtpSessions", testRegisterOtpSessionToOneSetOpUserUsingUser)
	t.Run("SessionToUserUsingSessions", testSessionToOneSetOpUserUsingUser)
	t.Run("SettingToUserUsingSetting", testSettingToOneSetOpUserUsingUser)
	t.Run("StaffToUserUsingStaff", testStaffToOneSetOpUserUsingUser)
	t.Run("UserBrandToUserUsingUserBrands", testUserBrandToOneSetOpUserUsingUser)
	t.Run("UserBrandToBrandUsingUserBrands", testUserBrandToOneSetOpBrandUsingBrand)
	t.Run("WebauthnToUserUsingWebauthns", testWebauthnToOneSetOpUserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {
	t.Run("UserToOtpUsingOtp", testUserOneToOneSetOpOtpUsingOtp)
	t.Run("UserToPasswordUsingPassword", testUserOneToOneSetOpPasswordUsingPassword)
	t.Run("UserToSettingUsingSetting", testUserOneToOneSetOpSettingUsingSetting)
	t.Run("UserToStaffUsingStaff", testUserOneToOneSetOpStaffUsingStaff)
}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("BrandToUserBrands", testBrandToManyAddOpUserBrands)
	t.Run("BroadcastEntryToEntryBroadcastNotices", testBroadcastEntryToManyAddOpEntryBroadcastNotices)
	t.Run("ClientToClientAllowRules", testClientToManyAddOpClientAllowRules)
	t.Run("ClientToClientRedirects", testClientToManyAddOpClientRedirects)
	t.Run("ClientToClientReferrers", testClientToManyAddOpClientReferrers)
	t.Run("ClientToClientScopes", testClientToManyAddOpClientScopes)
	t.Run("ClientToLoginClientHistories", testClientToManyAddOpLoginClientHistories)
	t.Run("ClientToOauthSessions", testClientToManyAddOpOauthSessions)
	t.Run("OrganizationToOrgInviteOrgSessions", testOrganizationToManyAddOpOrgInviteOrgSessions)
	t.Run("OrganizationToOrganizationUsers", testOrganizationToManyAddOpOrganizationUsers)
	t.Run("UserToBroadcastNotices", testUserToManyAddOpBroadcastNotices)
	t.Run("UserToCertificateSessions", testUserToManyAddOpCertificateSessions)
	t.Run("UserToOwnerUserClients", testUserToManyAddOpOwnerUserClients)
	t.Run("UserToClientRefreshes", testUserToManyAddOpClientRefreshes)
	t.Run("UserToClientSessions", testUserToManyAddOpClientSessions)
	t.Run("UserToEmailVerifySessions", testUserToManyAddOpEmailVerifySessions)
	t.Run("UserToLoginClientHistories", testUserToManyAddOpLoginClientHistories)
	t.Run("UserToLoginHistories", testUserToManyAddOpLoginHistories)
	t.Run("UserToLoginTryHistories", testUserToManyAddOpLoginTryHistories)
	t.Run("UserToOauthSessions", testUserToManyAddOpOauthSessions)
	t.Run("UserToOrganizationUsers", testUserToManyAddOpOrganizationUsers)
	t.Run("UserToOtpBackups", testUserToManyAddOpOtpBackups)
	t.Run("UserToOtpSessions", testUserToManyAddOpOtpSessions)
	t.Run("UserToRefreshes", testUserToManyAddOpRefreshes)
	t.Run("UserToRegisterOtpSessions", testUserToManyAddOpRegisterOtpSessions)
	t.Run("UserToSessions", testUserToManyAddOpSessions)
	t.Run("UserToUserBrands", testUserToManyAddOpUserBrands)
	t.Run("UserToWebauthns", testUserToManyAddOpWebauthns)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Brands", testBrandsReload)
	t.Run("BroadcastEntries", testBroadcastEntriesReload)
	t.Run("BroadcastNotices", testBroadcastNoticesReload)
	t.Run("CertificateSessions", testCertificateSessionsReload)
	t.Run("Clients", testClientsReload)
	t.Run("ClientAllowRules", testClientAllowRulesReload)
	t.Run("ClientRedirects", testClientRedirectsReload)
	t.Run("ClientReferrers", testClientReferrersReload)
	t.Run("ClientRefreshes", testClientRefreshesReload)
	t.Run("ClientScopes", testClientScopesReload)
	t.Run("ClientSessions", testClientSessionsReload)
	t.Run("EmailVerifySessions", testEmailVerifySessionsReload)
	t.Run("InviteOrgSessions", testInviteOrgSessionsReload)
	t.Run("LoginClientHistories", testLoginClientHistoriesReload)
	t.Run("LoginHistories", testLoginHistoriesReload)
	t.Run("LoginTryHistories", testLoginTryHistoriesReload)
	t.Run("OauthSessions", testOauthSessionsReload)
	t.Run("Organizations", testOrganizationsReload)
	t.Run("OrganizationUsers", testOrganizationUsersReload)
	t.Run("Otps", testOtpsReload)
	t.Run("OtpBackups", testOtpBackupsReload)
	t.Run("OtpSessions", testOtpSessionsReload)
	t.Run("Passwords", testPasswordsReload)
	t.Run("Refreshes", testRefreshesReload)
	t.Run("RegisterOtpSessions", testRegisterOtpSessionsReload)
	t.Run("RegisterSessions", testRegisterSessionsReload)
	t.Run("ReregistrationPasswordSessions", testReregistrationPasswordSessionsReload)
	t.Run("Sessions", testSessionsReload)
	t.Run("Settings", testSettingsReload)
	t.Run("Staffs", testStaffsReload)
	t.Run("Users", testUsersReload)
	t.Run("UserBrands", testUserBrandsReload)
	t.Run("Webauthns", testWebauthnsReload)
	t.Run("WebauthnSessions", testWebauthnSessionsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Brands", testBrandsReloadAll)
	t.Run("BroadcastEntries", testBroadcastEntriesReloadAll)
	t.Run("BroadcastNotices", testBroadcastNoticesReloadAll)
	t.Run("CertificateSessions", testCertificateSessionsReloadAll)
	t.Run("Clients", testClientsReloadAll)
	t.Run("ClientAllowRules", testClientAllowRulesReloadAll)
	t.Run("ClientRedirects", testClientRedirectsReloadAll)
	t.Run("ClientReferrers", testClientReferrersReloadAll)
	t.Run("ClientRefreshes", testClientRefreshesReloadAll)
	t.Run("ClientScopes", testClientScopesReloadAll)
	t.Run("ClientSessions", testClientSessionsReloadAll)
	t.Run("EmailVerifySessions", testEmailVerifySessionsReloadAll)
	t.Run("InviteOrgSessions", testInviteOrgSessionsReloadAll)
	t.Run("LoginClientHistories", testLoginClientHistoriesReloadAll)
	t.Run("LoginHistories", testLoginHistoriesReloadAll)
	t.Run("LoginTryHistories", testLoginTryHistoriesReloadAll)
	t.Run("OauthSessions", testOauthSessionsReloadAll)
	t.Run("Organizations", testOrganizationsReloadAll)
	t.Run("OrganizationUsers", testOrganizationUsersReloadAll)
	t.Run("Otps", testOtpsReloadAll)
	t.Run("OtpBackups", testOtpBackupsReloadAll)
	t.Run("OtpSessions", testOtpSessionsReloadAll)
	t.Run("Passwords", testPasswordsReloadAll)
	t.Run("Refreshes", testRefreshesReloadAll)
	t.Run("RegisterOtpSessions", testRegisterOtpSessionsReloadAll)
	t.Run("RegisterSessions", testRegisterSessionsReloadAll)
	t.Run("ReregistrationPasswordSessions", testReregistrationPasswordSessionsReloadAll)
	t.Run("Sessions", testSessionsReloadAll)
	t.Run("Settings", testSettingsReloadAll)
	t.Run("Staffs", testStaffsReloadAll)
	t.Run("Users", testUsersReloadAll)
	t.Run("UserBrands", testUserBrandsReloadAll)
	t.Run("Webauthns", testWebauthnsReloadAll)
	t.Run("WebauthnSessions", testWebauthnSessionsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Brands", testBrandsSelect)
	t.Run("BroadcastEntries", testBroadcastEntriesSelect)
	t.Run("BroadcastNotices", testBroadcastNoticesSelect)
	t.Run("CertificateSessions", testCertificateSessionsSelect)
	t.Run("Clients", testClientsSelect)
	t.Run("ClientAllowRules", testClientAllowRulesSelect)
	t.Run("ClientRedirects", testClientRedirectsSelect)
	t.Run("ClientReferrers", testClientReferrersSelect)
	t.Run("ClientRefreshes", testClientRefreshesSelect)
	t.Run("ClientScopes", testClientScopesSelect)
	t.Run("ClientSessions", testClientSessionsSelect)
	t.Run("EmailVerifySessions", testEmailVerifySessionsSelect)
	t.Run("InviteOrgSessions", testInviteOrgSessionsSelect)
	t.Run("LoginClientHistories", testLoginClientHistoriesSelect)
	t.Run("LoginHistories", testLoginHistoriesSelect)
	t.Run("LoginTryHistories", testLoginTryHistoriesSelect)
	t.Run("OauthSessions", testOauthSessionsSelect)
	t.Run("Organizations", testOrganizationsSelect)
	t.Run("OrganizationUsers", testOrganizationUsersSelect)
	t.Run("Otps", testOtpsSelect)
	t.Run("OtpBackups", testOtpBackupsSelect)
	t.Run("OtpSessions", testOtpSessionsSelect)
	t.Run("Passwords", testPasswordsSelect)
	t.Run("Refreshes", testRefreshesSelect)
	t.Run("RegisterOtpSessions", testRegisterOtpSessionsSelect)
	t.Run("RegisterSessions", testRegisterSessionsSelect)
	t.Run("ReregistrationPasswordSessions", testReregistrationPasswordSessionsSelect)
	t.Run("Sessions", testSessionsSelect)
	t.Run("Settings", testSettingsSelect)
	t.Run("Staffs", testStaffsSelect)
	t.Run("Users", testUsersSelect)
	t.Run("UserBrands", testUserBrandsSelect)
	t.Run("Webauthns", testWebauthnsSelect)
	t.Run("WebauthnSessions", testWebauthnSessionsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Brands", testBrandsUpdate)
	t.Run("BroadcastEntries", testBroadcastEntriesUpdate)
	t.Run("BroadcastNotices", testBroadcastNoticesUpdate)
	t.Run("CertificateSessions", testCertificateSessionsUpdate)
	t.Run("Clients", testClientsUpdate)
	t.Run("ClientAllowRules", testClientAllowRulesUpdate)
	t.Run("ClientRedirects", testClientRedirectsUpdate)
	t.Run("ClientReferrers", testClientReferrersUpdate)
	t.Run("ClientRefreshes", testClientRefreshesUpdate)
	t.Run("ClientScopes", testClientScopesUpdate)
	t.Run("ClientSessions", testClientSessionsUpdate)
	t.Run("EmailVerifySessions", testEmailVerifySessionsUpdate)
	t.Run("InviteOrgSessions", testInviteOrgSessionsUpdate)
	t.Run("LoginClientHistories", testLoginClientHistoriesUpdate)
	t.Run("LoginHistories", testLoginHistoriesUpdate)
	t.Run("LoginTryHistories", testLoginTryHistoriesUpdate)
	t.Run("OauthSessions", testOauthSessionsUpdate)
	t.Run("Organizations", testOrganizationsUpdate)
	t.Run("OrganizationUsers", testOrganizationUsersUpdate)
	t.Run("Otps", testOtpsUpdate)
	t.Run("OtpBackups", testOtpBackupsUpdate)
	t.Run("OtpSessions", testOtpSessionsUpdate)
	t.Run("Passwords", testPasswordsUpdate)
	t.Run("Refreshes", testRefreshesUpdate)
	t.Run("RegisterOtpSessions", testRegisterOtpSessionsUpdate)
	t.Run("RegisterSessions", testRegisterSessionsUpdate)
	t.Run("ReregistrationPasswordSessions", testReregistrationPasswordSessionsUpdate)
	t.Run("Sessions", testSessionsUpdate)
	t.Run("Settings", testSettingsUpdate)
	t.Run("Staffs", testStaffsUpdate)
	t.Run("Users", testUsersUpdate)
	t.Run("UserBrands", testUserBrandsUpdate)
	t.Run("Webauthns", testWebauthnsUpdate)
	t.Run("WebauthnSessions", testWebauthnSessionsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Brands", testBrandsSliceUpdateAll)
	t.Run("BroadcastEntries", testBroadcastEntriesSliceUpdateAll)
	t.Run("BroadcastNotices", testBroadcastNoticesSliceUpdateAll)
	t.Run("CertificateSessions", testCertificateSessionsSliceUpdateAll)
	t.Run("Clients", testClientsSliceUpdateAll)
	t.Run("ClientAllowRules", testClientAllowRulesSliceUpdateAll)
	t.Run("ClientRedirects", testClientRedirectsSliceUpdateAll)
	t.Run("ClientReferrers", testClientReferrersSliceUpdateAll)
	t.Run("ClientRefreshes", testClientRefreshesSliceUpdateAll)
	t.Run("ClientScopes", testClientScopesSliceUpdateAll)
	t.Run("ClientSessions", testClientSessionsSliceUpdateAll)
	t.Run("EmailVerifySessions", testEmailVerifySessionsSliceUpdateAll)
	t.Run("InviteOrgSessions", testInviteOrgSessionsSliceUpdateAll)
	t.Run("LoginClientHistories", testLoginClientHistoriesSliceUpdateAll)
	t.Run("LoginHistories", testLoginHistoriesSliceUpdateAll)
	t.Run("LoginTryHistories", testLoginTryHistoriesSliceUpdateAll)
	t.Run("OauthSessions", testOauthSessionsSliceUpdateAll)
	t.Run("Organizations", testOrganizationsSliceUpdateAll)
	t.Run("OrganizationUsers", testOrganizationUsersSliceUpdateAll)
	t.Run("Otps", testOtpsSliceUpdateAll)
	t.Run("OtpBackups", testOtpBackupsSliceUpdateAll)
	t.Run("OtpSessions", testOtpSessionsSliceUpdateAll)
	t.Run("Passwords", testPasswordsSliceUpdateAll)
	t.Run("Refreshes", testRefreshesSliceUpdateAll)
	t.Run("RegisterOtpSessions", testRegisterOtpSessionsSliceUpdateAll)
	t.Run("RegisterSessions", testRegisterSessionsSliceUpdateAll)
	t.Run("ReregistrationPasswordSessions", testReregistrationPasswordSessionsSliceUpdateAll)
	t.Run("Sessions", testSessionsSliceUpdateAll)
	t.Run("Settings", testSettingsSliceUpdateAll)
	t.Run("Staffs", testStaffsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
	t.Run("UserBrands", testUserBrandsSliceUpdateAll)
	t.Run("Webauthns", testWebauthnsSliceUpdateAll)
	t.Run("WebauthnSessions", testWebauthnSessionsSliceUpdateAll)
}
