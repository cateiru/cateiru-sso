// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BroadcastNotice is an object representing the database table.
type BroadcastNotice struct {
	ID       uint      `boil:"id" json:"id" toml:"id" yaml:"id"`
	EntryID  uint      `boil:"entry_id" json:"entry_id" toml:"entry_id" yaml:"entry_id"`
	UserID   string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	IsRead   bool      `boil:"is_read" json:"is_read" toml:"is_read" yaml:"is_read"`
	Created  time.Time `boil:"created" json:"created" toml:"created" yaml:"created"`
	Modified time.Time `boil:"modified" json:"modified" toml:"modified" yaml:"modified"`

	R *broadcastNoticeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L broadcastNoticeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BroadcastNoticeColumns = struct {
	ID       string
	EntryID  string
	UserID   string
	IsRead   string
	Created  string
	Modified string
}{
	ID:       "id",
	EntryID:  "entry_id",
	UserID:   "user_id",
	IsRead:   "is_read",
	Created:  "created",
	Modified: "modified",
}

var BroadcastNoticeTableColumns = struct {
	ID       string
	EntryID  string
	UserID   string
	IsRead   string
	Created  string
	Modified string
}{
	ID:       "broadcast_notice.id",
	EntryID:  "broadcast_notice.entry_id",
	UserID:   "broadcast_notice.user_id",
	IsRead:   "broadcast_notice.is_read",
	Created:  "broadcast_notice.created",
	Modified: "broadcast_notice.modified",
}

// Generated where

type whereHelperbool struct{ field string }

func (w whereHelperbool) EQ(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperbool) NEQ(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperbool) LT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperbool) LTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperbool) GT(x bool) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperbool) GTE(x bool) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }

var BroadcastNoticeWhere = struct {
	ID       whereHelperuint
	EntryID  whereHelperuint
	UserID   whereHelperstring
	IsRead   whereHelperbool
	Created  whereHelpertime_Time
	Modified whereHelpertime_Time
}{
	ID:       whereHelperuint{field: "`broadcast_notice`.`id`"},
	EntryID:  whereHelperuint{field: "`broadcast_notice`.`entry_id`"},
	UserID:   whereHelperstring{field: "`broadcast_notice`.`user_id`"},
	IsRead:   whereHelperbool{field: "`broadcast_notice`.`is_read`"},
	Created:  whereHelpertime_Time{field: "`broadcast_notice`.`created`"},
	Modified: whereHelpertime_Time{field: "`broadcast_notice`.`modified`"},
}

// BroadcastNoticeRels is where relationship names are stored.
var BroadcastNoticeRels = struct {
}{}

// broadcastNoticeR is where relationships are stored.
type broadcastNoticeR struct {
}

// NewStruct creates a new relationship struct
func (*broadcastNoticeR) NewStruct() *broadcastNoticeR {
	return &broadcastNoticeR{}
}

// broadcastNoticeL is where Load methods for each relationship are stored.
type broadcastNoticeL struct{}

var (
	broadcastNoticeAllColumns            = []string{"id", "entry_id", "user_id", "is_read", "created", "modified"}
	broadcastNoticeColumnsWithoutDefault = []string{"entry_id", "user_id"}
	broadcastNoticeColumnsWithDefault    = []string{"id", "is_read", "created", "modified"}
	broadcastNoticePrimaryKeyColumns     = []string{"id"}
	broadcastNoticeGeneratedColumns      = []string{}
)

type (
	// BroadcastNoticeSlice is an alias for a slice of pointers to BroadcastNotice.
	// This should almost always be used instead of []BroadcastNotice.
	BroadcastNoticeSlice []*BroadcastNotice
	// BroadcastNoticeHook is the signature for custom BroadcastNotice hook methods
	BroadcastNoticeHook func(context.Context, boil.ContextExecutor, *BroadcastNotice) error

	broadcastNoticeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	broadcastNoticeType                 = reflect.TypeOf(&BroadcastNotice{})
	broadcastNoticeMapping              = queries.MakeStructMapping(broadcastNoticeType)
	broadcastNoticePrimaryKeyMapping, _ = queries.BindMapping(broadcastNoticeType, broadcastNoticeMapping, broadcastNoticePrimaryKeyColumns)
	broadcastNoticeInsertCacheMut       sync.RWMutex
	broadcastNoticeInsertCache          = make(map[string]insertCache)
	broadcastNoticeUpdateCacheMut       sync.RWMutex
	broadcastNoticeUpdateCache          = make(map[string]updateCache)
	broadcastNoticeUpsertCacheMut       sync.RWMutex
	broadcastNoticeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var broadcastNoticeAfterSelectHooks []BroadcastNoticeHook

var broadcastNoticeBeforeInsertHooks []BroadcastNoticeHook
var broadcastNoticeAfterInsertHooks []BroadcastNoticeHook

var broadcastNoticeBeforeUpdateHooks []BroadcastNoticeHook
var broadcastNoticeAfterUpdateHooks []BroadcastNoticeHook

var broadcastNoticeBeforeDeleteHooks []BroadcastNoticeHook
var broadcastNoticeAfterDeleteHooks []BroadcastNoticeHook

var broadcastNoticeBeforeUpsertHooks []BroadcastNoticeHook
var broadcastNoticeAfterUpsertHooks []BroadcastNoticeHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BroadcastNotice) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range broadcastNoticeAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BroadcastNotice) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range broadcastNoticeBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BroadcastNotice) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range broadcastNoticeAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BroadcastNotice) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range broadcastNoticeBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BroadcastNotice) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range broadcastNoticeAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BroadcastNotice) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range broadcastNoticeBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BroadcastNotice) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range broadcastNoticeAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BroadcastNotice) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range broadcastNoticeBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BroadcastNotice) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range broadcastNoticeAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBroadcastNoticeHook registers your hook function for all future operations.
func AddBroadcastNoticeHook(hookPoint boil.HookPoint, broadcastNoticeHook BroadcastNoticeHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		broadcastNoticeAfterSelectHooks = append(broadcastNoticeAfterSelectHooks, broadcastNoticeHook)
	case boil.BeforeInsertHook:
		broadcastNoticeBeforeInsertHooks = append(broadcastNoticeBeforeInsertHooks, broadcastNoticeHook)
	case boil.AfterInsertHook:
		broadcastNoticeAfterInsertHooks = append(broadcastNoticeAfterInsertHooks, broadcastNoticeHook)
	case boil.BeforeUpdateHook:
		broadcastNoticeBeforeUpdateHooks = append(broadcastNoticeBeforeUpdateHooks, broadcastNoticeHook)
	case boil.AfterUpdateHook:
		broadcastNoticeAfterUpdateHooks = append(broadcastNoticeAfterUpdateHooks, broadcastNoticeHook)
	case boil.BeforeDeleteHook:
		broadcastNoticeBeforeDeleteHooks = append(broadcastNoticeBeforeDeleteHooks, broadcastNoticeHook)
	case boil.AfterDeleteHook:
		broadcastNoticeAfterDeleteHooks = append(broadcastNoticeAfterDeleteHooks, broadcastNoticeHook)
	case boil.BeforeUpsertHook:
		broadcastNoticeBeforeUpsertHooks = append(broadcastNoticeBeforeUpsertHooks, broadcastNoticeHook)
	case boil.AfterUpsertHook:
		broadcastNoticeAfterUpsertHooks = append(broadcastNoticeAfterUpsertHooks, broadcastNoticeHook)
	}
}

// One returns a single broadcastNotice record from the query.
func (q broadcastNoticeQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BroadcastNotice, error) {
	o := &BroadcastNotice{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for broadcast_notice")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BroadcastNotice records from the query.
func (q broadcastNoticeQuery) All(ctx context.Context, exec boil.ContextExecutor) (BroadcastNoticeSlice, error) {
	var o []*BroadcastNotice

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BroadcastNotice slice")
	}

	if len(broadcastNoticeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BroadcastNotice records in the query.
func (q broadcastNoticeQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count broadcast_notice rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q broadcastNoticeQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if broadcast_notice exists")
	}

	return count > 0, nil
}

// BroadcastNotices retrieves all the records using an executor.
func BroadcastNotices(mods ...qm.QueryMod) broadcastNoticeQuery {
	mods = append(mods, qm.From("`broadcast_notice`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`broadcast_notice`.*"})
	}

	return broadcastNoticeQuery{q}
}

// FindBroadcastNotice retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBroadcastNotice(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*BroadcastNotice, error) {
	broadcastNoticeObj := &BroadcastNotice{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `broadcast_notice` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, broadcastNoticeObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from broadcast_notice")
	}

	if err = broadcastNoticeObj.doAfterSelectHooks(ctx, exec); err != nil {
		return broadcastNoticeObj, err
	}

	return broadcastNoticeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BroadcastNotice) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no broadcast_notice provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(broadcastNoticeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	broadcastNoticeInsertCacheMut.RLock()
	cache, cached := broadcastNoticeInsertCache[key]
	broadcastNoticeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			broadcastNoticeAllColumns,
			broadcastNoticeColumnsWithDefault,
			broadcastNoticeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(broadcastNoticeType, broadcastNoticeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(broadcastNoticeType, broadcastNoticeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `broadcast_notice` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `broadcast_notice` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `broadcast_notice` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, broadcastNoticePrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into broadcast_notice")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == broadcastNoticeMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for broadcast_notice")
	}

CacheNoHooks:
	if !cached {
		broadcastNoticeInsertCacheMut.Lock()
		broadcastNoticeInsertCache[key] = cache
		broadcastNoticeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BroadcastNotice.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BroadcastNotice) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	broadcastNoticeUpdateCacheMut.RLock()
	cache, cached := broadcastNoticeUpdateCache[key]
	broadcastNoticeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			broadcastNoticeAllColumns,
			broadcastNoticePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update broadcast_notice, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `broadcast_notice` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, broadcastNoticePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(broadcastNoticeType, broadcastNoticeMapping, append(wl, broadcastNoticePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update broadcast_notice row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for broadcast_notice")
	}

	if !cached {
		broadcastNoticeUpdateCacheMut.Lock()
		broadcastNoticeUpdateCache[key] = cache
		broadcastNoticeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q broadcastNoticeQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for broadcast_notice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for broadcast_notice")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BroadcastNoticeSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), broadcastNoticePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `broadcast_notice` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, broadcastNoticePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in broadcastNotice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all broadcastNotice")
	}
	return rowsAff, nil
}

var mySQLBroadcastNoticeUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BroadcastNotice) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no broadcast_notice provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(broadcastNoticeColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLBroadcastNoticeUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	broadcastNoticeUpsertCacheMut.RLock()
	cache, cached := broadcastNoticeUpsertCache[key]
	broadcastNoticeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			broadcastNoticeAllColumns,
			broadcastNoticeColumnsWithDefault,
			broadcastNoticeColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			broadcastNoticeAllColumns,
			broadcastNoticePrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert broadcast_notice, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`broadcast_notice`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `broadcast_notice` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(broadcastNoticeType, broadcastNoticeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(broadcastNoticeType, broadcastNoticeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for broadcast_notice")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == broadcastNoticeMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(broadcastNoticeType, broadcastNoticeMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for broadcast_notice")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for broadcast_notice")
	}

CacheNoHooks:
	if !cached {
		broadcastNoticeUpsertCacheMut.Lock()
		broadcastNoticeUpsertCache[key] = cache
		broadcastNoticeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single BroadcastNotice record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BroadcastNotice) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BroadcastNotice provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), broadcastNoticePrimaryKeyMapping)
	sql := "DELETE FROM `broadcast_notice` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from broadcast_notice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for broadcast_notice")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q broadcastNoticeQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no broadcastNoticeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from broadcast_notice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for broadcast_notice")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BroadcastNoticeSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(broadcastNoticeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), broadcastNoticePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `broadcast_notice` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, broadcastNoticePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from broadcastNotice slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for broadcast_notice")
	}

	if len(broadcastNoticeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BroadcastNotice) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBroadcastNotice(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BroadcastNoticeSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BroadcastNoticeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), broadcastNoticePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `broadcast_notice`.* FROM `broadcast_notice` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, broadcastNoticePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BroadcastNoticeSlice")
	}

	*o = slice

	return nil
}

// BroadcastNoticeExists checks if the BroadcastNotice row exists.
func BroadcastNoticeExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `broadcast_notice` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if broadcast_notice exists")
	}

	return exists, nil
}

// Exists checks if the BroadcastNotice row exists.
func (o *BroadcastNotice) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BroadcastNoticeExists(ctx, exec, o.ID)
}
