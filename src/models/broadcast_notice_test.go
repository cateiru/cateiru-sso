// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBroadcastNotices(t *testing.T) {
	t.Parallel()

	query := BroadcastNotices()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBroadcastNoticesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BroadcastNotice{}
	if err = randomize.Struct(seed, o, broadcastNoticeDBTypes, true, broadcastNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BroadcastNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BroadcastNotices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBroadcastNoticesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BroadcastNotice{}
	if err = randomize.Struct(seed, o, broadcastNoticeDBTypes, true, broadcastNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BroadcastNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := BroadcastNotices().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BroadcastNotices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBroadcastNoticesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BroadcastNotice{}
	if err = randomize.Struct(seed, o, broadcastNoticeDBTypes, true, broadcastNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BroadcastNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BroadcastNoticeSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := BroadcastNotices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBroadcastNoticesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BroadcastNotice{}
	if err = randomize.Struct(seed, o, broadcastNoticeDBTypes, true, broadcastNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BroadcastNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BroadcastNoticeExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if BroadcastNotice exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BroadcastNoticeExists to return true, but got false.")
	}
}

func testBroadcastNoticesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BroadcastNotice{}
	if err = randomize.Struct(seed, o, broadcastNoticeDBTypes, true, broadcastNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BroadcastNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	broadcastNoticeFound, err := FindBroadcastNotice(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if broadcastNoticeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBroadcastNoticesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BroadcastNotice{}
	if err = randomize.Struct(seed, o, broadcastNoticeDBTypes, true, broadcastNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BroadcastNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = BroadcastNotices().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBroadcastNoticesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BroadcastNotice{}
	if err = randomize.Struct(seed, o, broadcastNoticeDBTypes, true, broadcastNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BroadcastNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := BroadcastNotices().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBroadcastNoticesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	broadcastNoticeOne := &BroadcastNotice{}
	broadcastNoticeTwo := &BroadcastNotice{}
	if err = randomize.Struct(seed, broadcastNoticeOne, broadcastNoticeDBTypes, false, broadcastNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BroadcastNotice struct: %s", err)
	}
	if err = randomize.Struct(seed, broadcastNoticeTwo, broadcastNoticeDBTypes, false, broadcastNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BroadcastNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = broadcastNoticeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = broadcastNoticeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BroadcastNotices().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBroadcastNoticesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	broadcastNoticeOne := &BroadcastNotice{}
	broadcastNoticeTwo := &BroadcastNotice{}
	if err = randomize.Struct(seed, broadcastNoticeOne, broadcastNoticeDBTypes, false, broadcastNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BroadcastNotice struct: %s", err)
	}
	if err = randomize.Struct(seed, broadcastNoticeTwo, broadcastNoticeDBTypes, false, broadcastNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BroadcastNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = broadcastNoticeOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = broadcastNoticeTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BroadcastNotices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func broadcastNoticeBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *BroadcastNotice) error {
	*o = BroadcastNotice{}
	return nil
}

func broadcastNoticeAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *BroadcastNotice) error {
	*o = BroadcastNotice{}
	return nil
}

func broadcastNoticeAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *BroadcastNotice) error {
	*o = BroadcastNotice{}
	return nil
}

func broadcastNoticeBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BroadcastNotice) error {
	*o = BroadcastNotice{}
	return nil
}

func broadcastNoticeAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *BroadcastNotice) error {
	*o = BroadcastNotice{}
	return nil
}

func broadcastNoticeBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BroadcastNotice) error {
	*o = BroadcastNotice{}
	return nil
}

func broadcastNoticeAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *BroadcastNotice) error {
	*o = BroadcastNotice{}
	return nil
}

func broadcastNoticeBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BroadcastNotice) error {
	*o = BroadcastNotice{}
	return nil
}

func broadcastNoticeAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *BroadcastNotice) error {
	*o = BroadcastNotice{}
	return nil
}

func testBroadcastNoticesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &BroadcastNotice{}
	o := &BroadcastNotice{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, broadcastNoticeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BroadcastNotice object: %s", err)
	}

	AddBroadcastNoticeHook(boil.BeforeInsertHook, broadcastNoticeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	broadcastNoticeBeforeInsertHooks = []BroadcastNoticeHook{}

	AddBroadcastNoticeHook(boil.AfterInsertHook, broadcastNoticeAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	broadcastNoticeAfterInsertHooks = []BroadcastNoticeHook{}

	AddBroadcastNoticeHook(boil.AfterSelectHook, broadcastNoticeAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	broadcastNoticeAfterSelectHooks = []BroadcastNoticeHook{}

	AddBroadcastNoticeHook(boil.BeforeUpdateHook, broadcastNoticeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	broadcastNoticeBeforeUpdateHooks = []BroadcastNoticeHook{}

	AddBroadcastNoticeHook(boil.AfterUpdateHook, broadcastNoticeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	broadcastNoticeAfterUpdateHooks = []BroadcastNoticeHook{}

	AddBroadcastNoticeHook(boil.BeforeDeleteHook, broadcastNoticeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	broadcastNoticeBeforeDeleteHooks = []BroadcastNoticeHook{}

	AddBroadcastNoticeHook(boil.AfterDeleteHook, broadcastNoticeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	broadcastNoticeAfterDeleteHooks = []BroadcastNoticeHook{}

	AddBroadcastNoticeHook(boil.BeforeUpsertHook, broadcastNoticeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	broadcastNoticeBeforeUpsertHooks = []BroadcastNoticeHook{}

	AddBroadcastNoticeHook(boil.AfterUpsertHook, broadcastNoticeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	broadcastNoticeAfterUpsertHooks = []BroadcastNoticeHook{}
}

func testBroadcastNoticesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BroadcastNotice{}
	if err = randomize.Struct(seed, o, broadcastNoticeDBTypes, true, broadcastNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BroadcastNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BroadcastNotices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBroadcastNoticesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BroadcastNotice{}
	if err = randomize.Struct(seed, o, broadcastNoticeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize BroadcastNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(broadcastNoticeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := BroadcastNotices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBroadcastNoticeToOneBroadcastEntryUsingEntry(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local BroadcastNotice
	var foreign BroadcastEntry

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, broadcastNoticeDBTypes, false, broadcastNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BroadcastNotice struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, broadcastEntryDBTypes, false, broadcastEntryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BroadcastEntry struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.EntryID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Entry().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddBroadcastEntryHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *BroadcastEntry) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := BroadcastNoticeSlice{&local}
	if err = local.L.LoadEntry(ctx, tx, false, (*[]*BroadcastNotice)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Entry == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Entry = nil
	if err = local.L.LoadEntry(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Entry == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testBroadcastNoticeToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local BroadcastNotice
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, broadcastNoticeDBTypes, false, broadcastNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BroadcastNotice struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := BroadcastNoticeSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*BroadcastNotice)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testBroadcastNoticeToOneSetOpBroadcastEntryUsingEntry(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BroadcastNotice
	var b, c BroadcastEntry

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, broadcastNoticeDBTypes, false, strmangle.SetComplement(broadcastNoticePrimaryKeyColumns, broadcastNoticeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, broadcastEntryDBTypes, false, strmangle.SetComplement(broadcastEntryPrimaryKeyColumns, broadcastEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, broadcastEntryDBTypes, false, strmangle.SetComplement(broadcastEntryPrimaryKeyColumns, broadcastEntryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*BroadcastEntry{&b, &c} {
		err = a.SetEntry(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Entry != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.EntryBroadcastNotices[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.EntryID != x.ID {
			t.Error("foreign key was wrong value", a.EntryID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.EntryID))
		reflect.Indirect(reflect.ValueOf(&a.EntryID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.EntryID != x.ID {
			t.Error("foreign key was wrong value", a.EntryID, x.ID)
		}
	}
}
func testBroadcastNoticeToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a BroadcastNotice
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, broadcastNoticeDBTypes, false, strmangle.SetComplement(broadcastNoticePrimaryKeyColumns, broadcastNoticeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.BroadcastNotices[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testBroadcastNoticesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BroadcastNotice{}
	if err = randomize.Struct(seed, o, broadcastNoticeDBTypes, true, broadcastNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BroadcastNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBroadcastNoticesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BroadcastNotice{}
	if err = randomize.Struct(seed, o, broadcastNoticeDBTypes, true, broadcastNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BroadcastNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BroadcastNoticeSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBroadcastNoticesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &BroadcastNotice{}
	if err = randomize.Struct(seed, o, broadcastNoticeDBTypes, true, broadcastNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BroadcastNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := BroadcastNotices().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	broadcastNoticeDBTypes = map[string]string{`ID`: `int`, `EntryID`: `int`, `UserID`: `varchar`, `IsRead`: `tinyint`, `CreatedAt`: `datetime`, `ModifiedAt`: `datetime`}
	_                      = bytes.MinRead
)

func testBroadcastNoticesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(broadcastNoticePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(broadcastNoticeAllColumns) == len(broadcastNoticePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BroadcastNotice{}
	if err = randomize.Struct(seed, o, broadcastNoticeDBTypes, true, broadcastNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BroadcastNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BroadcastNotices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, broadcastNoticeDBTypes, true, broadcastNoticePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BroadcastNotice struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBroadcastNoticesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(broadcastNoticeAllColumns) == len(broadcastNoticePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &BroadcastNotice{}
	if err = randomize.Struct(seed, o, broadcastNoticeDBTypes, true, broadcastNoticeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize BroadcastNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := BroadcastNotices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, broadcastNoticeDBTypes, true, broadcastNoticePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BroadcastNotice struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(broadcastNoticeAllColumns, broadcastNoticePrimaryKeyColumns) {
		fields = broadcastNoticeAllColumns
	} else {
		fields = strmangle.SetComplement(
			broadcastNoticeAllColumns,
			broadcastNoticePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BroadcastNoticeSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBroadcastNoticesUpsert(t *testing.T) {
	t.Parallel()

	if len(broadcastNoticeAllColumns) == len(broadcastNoticePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLBroadcastNoticeUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := BroadcastNotice{}
	if err = randomize.Struct(seed, &o, broadcastNoticeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize BroadcastNotice struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BroadcastNotice: %s", err)
	}

	count, err := BroadcastNotices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, broadcastNoticeDBTypes, false, broadcastNoticePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize BroadcastNotice struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert BroadcastNotice: %s", err)
	}

	count, err = BroadcastNotices().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
