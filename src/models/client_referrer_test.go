// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testClientReferrers(t *testing.T) {
	t.Parallel()

	query := ClientReferrers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testClientReferrersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ClientReferrer{}
	if err = randomize.Struct(seed, o, clientReferrerDBTypes, true, clientReferrerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClientReferrer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ClientReferrers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testClientReferrersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ClientReferrer{}
	if err = randomize.Struct(seed, o, clientReferrerDBTypes, true, clientReferrerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClientReferrer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := ClientReferrers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ClientReferrers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testClientReferrersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ClientReferrer{}
	if err = randomize.Struct(seed, o, clientReferrerDBTypes, true, clientReferrerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClientReferrer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ClientReferrerSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := ClientReferrers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testClientReferrersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ClientReferrer{}
	if err = randomize.Struct(seed, o, clientReferrerDBTypes, true, clientReferrerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClientReferrer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ClientReferrerExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if ClientReferrer exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ClientReferrerExists to return true, but got false.")
	}
}

func testClientReferrersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ClientReferrer{}
	if err = randomize.Struct(seed, o, clientReferrerDBTypes, true, clientReferrerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClientReferrer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	clientReferrerFound, err := FindClientReferrer(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if clientReferrerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testClientReferrersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ClientReferrer{}
	if err = randomize.Struct(seed, o, clientReferrerDBTypes, true, clientReferrerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClientReferrer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = ClientReferrers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testClientReferrersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ClientReferrer{}
	if err = randomize.Struct(seed, o, clientReferrerDBTypes, true, clientReferrerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClientReferrer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := ClientReferrers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testClientReferrersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	clientReferrerOne := &ClientReferrer{}
	clientReferrerTwo := &ClientReferrer{}
	if err = randomize.Struct(seed, clientReferrerOne, clientReferrerDBTypes, false, clientReferrerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClientReferrer struct: %s", err)
	}
	if err = randomize.Struct(seed, clientReferrerTwo, clientReferrerDBTypes, false, clientReferrerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClientReferrer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = clientReferrerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = clientReferrerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ClientReferrers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testClientReferrersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	clientReferrerOne := &ClientReferrer{}
	clientReferrerTwo := &ClientReferrer{}
	if err = randomize.Struct(seed, clientReferrerOne, clientReferrerDBTypes, false, clientReferrerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClientReferrer struct: %s", err)
	}
	if err = randomize.Struct(seed, clientReferrerTwo, clientReferrerDBTypes, false, clientReferrerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClientReferrer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = clientReferrerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = clientReferrerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ClientReferrers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func clientReferrerBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *ClientReferrer) error {
	*o = ClientReferrer{}
	return nil
}

func clientReferrerAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *ClientReferrer) error {
	*o = ClientReferrer{}
	return nil
}

func clientReferrerAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *ClientReferrer) error {
	*o = ClientReferrer{}
	return nil
}

func clientReferrerBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ClientReferrer) error {
	*o = ClientReferrer{}
	return nil
}

func clientReferrerAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *ClientReferrer) error {
	*o = ClientReferrer{}
	return nil
}

func clientReferrerBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ClientReferrer) error {
	*o = ClientReferrer{}
	return nil
}

func clientReferrerAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *ClientReferrer) error {
	*o = ClientReferrer{}
	return nil
}

func clientReferrerBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ClientReferrer) error {
	*o = ClientReferrer{}
	return nil
}

func clientReferrerAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *ClientReferrer) error {
	*o = ClientReferrer{}
	return nil
}

func testClientReferrersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &ClientReferrer{}
	o := &ClientReferrer{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, clientReferrerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ClientReferrer object: %s", err)
	}

	AddClientReferrerHook(boil.BeforeInsertHook, clientReferrerBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	clientReferrerBeforeInsertHooks = []ClientReferrerHook{}

	AddClientReferrerHook(boil.AfterInsertHook, clientReferrerAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	clientReferrerAfterInsertHooks = []ClientReferrerHook{}

	AddClientReferrerHook(boil.AfterSelectHook, clientReferrerAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	clientReferrerAfterSelectHooks = []ClientReferrerHook{}

	AddClientReferrerHook(boil.BeforeUpdateHook, clientReferrerBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	clientReferrerBeforeUpdateHooks = []ClientReferrerHook{}

	AddClientReferrerHook(boil.AfterUpdateHook, clientReferrerAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	clientReferrerAfterUpdateHooks = []ClientReferrerHook{}

	AddClientReferrerHook(boil.BeforeDeleteHook, clientReferrerBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	clientReferrerBeforeDeleteHooks = []ClientReferrerHook{}

	AddClientReferrerHook(boil.AfterDeleteHook, clientReferrerAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	clientReferrerAfterDeleteHooks = []ClientReferrerHook{}

	AddClientReferrerHook(boil.BeforeUpsertHook, clientReferrerBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	clientReferrerBeforeUpsertHooks = []ClientReferrerHook{}

	AddClientReferrerHook(boil.AfterUpsertHook, clientReferrerAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	clientReferrerAfterUpsertHooks = []ClientReferrerHook{}
}

func testClientReferrersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ClientReferrer{}
	if err = randomize.Struct(seed, o, clientReferrerDBTypes, true, clientReferrerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClientReferrer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ClientReferrers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testClientReferrersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ClientReferrer{}
	if err = randomize.Struct(seed, o, clientReferrerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize ClientReferrer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(clientReferrerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := ClientReferrers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testClientReferrerToOneClientUsingClient(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local ClientReferrer
	var foreign Client

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, clientReferrerDBTypes, false, clientReferrerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClientReferrer struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, clientDBTypes, false, clientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Client struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.ClientID = foreign.ClientID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Client().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ClientID != foreign.ClientID {
		t.Errorf("want: %v, got %v", foreign.ClientID, check.ClientID)
	}

	ranAfterSelectHook := false
	AddClientHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Client) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ClientReferrerSlice{&local}
	if err = local.L.LoadClient(ctx, tx, false, (*[]*ClientReferrer)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Client == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Client = nil
	if err = local.L.LoadClient(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Client == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testClientReferrerToOneSetOpClientUsingClient(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a ClientReferrer
	var b, c Client

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, clientReferrerDBTypes, false, strmangle.SetComplement(clientReferrerPrimaryKeyColumns, clientReferrerColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, clientDBTypes, false, strmangle.SetComplement(clientPrimaryKeyColumns, clientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, clientDBTypes, false, strmangle.SetComplement(clientPrimaryKeyColumns, clientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Client{&b, &c} {
		err = a.SetClient(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Client != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.ClientReferrers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.ClientID != x.ClientID {
			t.Error("foreign key was wrong value", a.ClientID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.ClientID))
		reflect.Indirect(reflect.ValueOf(&a.ClientID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.ClientID != x.ClientID {
			t.Error("foreign key was wrong value", a.ClientID, x.ClientID)
		}
	}
}

func testClientReferrersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ClientReferrer{}
	if err = randomize.Struct(seed, o, clientReferrerDBTypes, true, clientReferrerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClientReferrer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testClientReferrersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ClientReferrer{}
	if err = randomize.Struct(seed, o, clientReferrerDBTypes, true, clientReferrerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClientReferrer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ClientReferrerSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testClientReferrersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &ClientReferrer{}
	if err = randomize.Struct(seed, o, clientReferrerDBTypes, true, clientReferrerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClientReferrer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := ClientReferrers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	clientReferrerDBTypes = map[string]string{`ID`: `int`, `ClientID`: `varchar`, `Host`: `varchar`, `URL`: `text`, `CreatedAt`: `datetime`}
	_                     = bytes.MinRead
)

func testClientReferrersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(clientReferrerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(clientReferrerAllColumns) == len(clientReferrerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ClientReferrer{}
	if err = randomize.Struct(seed, o, clientReferrerDBTypes, true, clientReferrerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClientReferrer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ClientReferrers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, clientReferrerDBTypes, true, clientReferrerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ClientReferrer struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testClientReferrersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(clientReferrerAllColumns) == len(clientReferrerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &ClientReferrer{}
	if err = randomize.Struct(seed, o, clientReferrerDBTypes, true, clientReferrerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClientReferrer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := ClientReferrers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, clientReferrerDBTypes, true, clientReferrerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ClientReferrer struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(clientReferrerAllColumns, clientReferrerPrimaryKeyColumns) {
		fields = clientReferrerAllColumns
	} else {
		fields = strmangle.SetComplement(
			clientReferrerAllColumns,
			clientReferrerPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ClientReferrerSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testClientReferrersUpsert(t *testing.T) {
	t.Parallel()

	if len(clientReferrerAllColumns) == len(clientReferrerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLClientReferrerUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := ClientReferrer{}
	if err = randomize.Struct(seed, &o, clientReferrerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize ClientReferrer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ClientReferrer: %s", err)
	}

	count, err := ClientReferrers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, clientReferrerDBTypes, false, clientReferrerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize ClientReferrer struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert ClientReferrer: %s", err)
	}

	count, err = ClientReferrers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
