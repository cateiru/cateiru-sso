// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ClientRefresh is an object representing the database table.
type ClientRefresh struct {
	ID            string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID        []byte    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	ClientID      string    `boil:"client_id" json:"client_id" toml:"client_id" yaml:"client_id"`
	LoginClientID uint      `boil:"login_client_id" json:"login_client_id" toml:"login_client_id" yaml:"login_client_id"`
	SessionID     []byte    `boil:"session_id" json:"session_id" toml:"session_id" yaml:"session_id"`
	Period        time.Time `boil:"period" json:"period" toml:"period" yaml:"period"`
	Created       time.Time `boil:"created" json:"created" toml:"created" yaml:"created"`
	Modified      time.Time `boil:"modified" json:"modified" toml:"modified" yaml:"modified"`

	R *clientRefreshR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L clientRefreshL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ClientRefreshColumns = struct {
	ID            string
	UserID        string
	ClientID      string
	LoginClientID string
	SessionID     string
	Period        string
	Created       string
	Modified      string
}{
	ID:            "id",
	UserID:        "user_id",
	ClientID:      "client_id",
	LoginClientID: "login_client_id",
	SessionID:     "session_id",
	Period:        "period",
	Created:       "created",
	Modified:      "modified",
}

var ClientRefreshTableColumns = struct {
	ID            string
	UserID        string
	ClientID      string
	LoginClientID string
	SessionID     string
	Period        string
	Created       string
	Modified      string
}{
	ID:            "client_refresh.id",
	UserID:        "client_refresh.user_id",
	ClientID:      "client_refresh.client_id",
	LoginClientID: "client_refresh.login_client_id",
	SessionID:     "client_refresh.session_id",
	Period:        "client_refresh.period",
	Created:       "client_refresh.created",
	Modified:      "client_refresh.modified",
}

// Generated where

var ClientRefreshWhere = struct {
	ID            whereHelperstring
	UserID        whereHelper__byte
	ClientID      whereHelperstring
	LoginClientID whereHelperuint
	SessionID     whereHelper__byte
	Period        whereHelpertime_Time
	Created       whereHelpertime_Time
	Modified      whereHelpertime_Time
}{
	ID:            whereHelperstring{field: "`client_refresh`.`id`"},
	UserID:        whereHelper__byte{field: "`client_refresh`.`user_id`"},
	ClientID:      whereHelperstring{field: "`client_refresh`.`client_id`"},
	LoginClientID: whereHelperuint{field: "`client_refresh`.`login_client_id`"},
	SessionID:     whereHelper__byte{field: "`client_refresh`.`session_id`"},
	Period:        whereHelpertime_Time{field: "`client_refresh`.`period`"},
	Created:       whereHelpertime_Time{field: "`client_refresh`.`created`"},
	Modified:      whereHelpertime_Time{field: "`client_refresh`.`modified`"},
}

// ClientRefreshRels is where relationship names are stored.
var ClientRefreshRels = struct {
}{}

// clientRefreshR is where relationships are stored.
type clientRefreshR struct {
}

// NewStruct creates a new relationship struct
func (*clientRefreshR) NewStruct() *clientRefreshR {
	return &clientRefreshR{}
}

// clientRefreshL is where Load methods for each relationship are stored.
type clientRefreshL struct{}

var (
	clientRefreshAllColumns            = []string{"id", "user_id", "client_id", "login_client_id", "session_id", "period", "created", "modified"}
	clientRefreshColumnsWithoutDefault = []string{"id", "user_id", "client_id", "login_client_id", "session_id"}
	clientRefreshColumnsWithDefault    = []string{"period", "created", "modified"}
	clientRefreshPrimaryKeyColumns     = []string{"id"}
	clientRefreshGeneratedColumns      = []string{}
)

type (
	// ClientRefreshSlice is an alias for a slice of pointers to ClientRefresh.
	// This should almost always be used instead of []ClientRefresh.
	ClientRefreshSlice []*ClientRefresh
	// ClientRefreshHook is the signature for custom ClientRefresh hook methods
	ClientRefreshHook func(context.Context, boil.ContextExecutor, *ClientRefresh) error

	clientRefreshQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	clientRefreshType                 = reflect.TypeOf(&ClientRefresh{})
	clientRefreshMapping              = queries.MakeStructMapping(clientRefreshType)
	clientRefreshPrimaryKeyMapping, _ = queries.BindMapping(clientRefreshType, clientRefreshMapping, clientRefreshPrimaryKeyColumns)
	clientRefreshInsertCacheMut       sync.RWMutex
	clientRefreshInsertCache          = make(map[string]insertCache)
	clientRefreshUpdateCacheMut       sync.RWMutex
	clientRefreshUpdateCache          = make(map[string]updateCache)
	clientRefreshUpsertCacheMut       sync.RWMutex
	clientRefreshUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var clientRefreshAfterSelectHooks []ClientRefreshHook

var clientRefreshBeforeInsertHooks []ClientRefreshHook
var clientRefreshAfterInsertHooks []ClientRefreshHook

var clientRefreshBeforeUpdateHooks []ClientRefreshHook
var clientRefreshAfterUpdateHooks []ClientRefreshHook

var clientRefreshBeforeDeleteHooks []ClientRefreshHook
var clientRefreshAfterDeleteHooks []ClientRefreshHook

var clientRefreshBeforeUpsertHooks []ClientRefreshHook
var clientRefreshAfterUpsertHooks []ClientRefreshHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *ClientRefresh) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientRefreshAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *ClientRefresh) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientRefreshBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *ClientRefresh) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientRefreshAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *ClientRefresh) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientRefreshBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *ClientRefresh) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientRefreshAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *ClientRefresh) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientRefreshBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *ClientRefresh) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientRefreshAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *ClientRefresh) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientRefreshBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *ClientRefresh) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range clientRefreshAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddClientRefreshHook registers your hook function for all future operations.
func AddClientRefreshHook(hookPoint boil.HookPoint, clientRefreshHook ClientRefreshHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		clientRefreshAfterSelectHooks = append(clientRefreshAfterSelectHooks, clientRefreshHook)
	case boil.BeforeInsertHook:
		clientRefreshBeforeInsertHooks = append(clientRefreshBeforeInsertHooks, clientRefreshHook)
	case boil.AfterInsertHook:
		clientRefreshAfterInsertHooks = append(clientRefreshAfterInsertHooks, clientRefreshHook)
	case boil.BeforeUpdateHook:
		clientRefreshBeforeUpdateHooks = append(clientRefreshBeforeUpdateHooks, clientRefreshHook)
	case boil.AfterUpdateHook:
		clientRefreshAfterUpdateHooks = append(clientRefreshAfterUpdateHooks, clientRefreshHook)
	case boil.BeforeDeleteHook:
		clientRefreshBeforeDeleteHooks = append(clientRefreshBeforeDeleteHooks, clientRefreshHook)
	case boil.AfterDeleteHook:
		clientRefreshAfterDeleteHooks = append(clientRefreshAfterDeleteHooks, clientRefreshHook)
	case boil.BeforeUpsertHook:
		clientRefreshBeforeUpsertHooks = append(clientRefreshBeforeUpsertHooks, clientRefreshHook)
	case boil.AfterUpsertHook:
		clientRefreshAfterUpsertHooks = append(clientRefreshAfterUpsertHooks, clientRefreshHook)
	}
}

// One returns a single clientRefresh record from the query.
func (q clientRefreshQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ClientRefresh, error) {
	o := &ClientRefresh{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for client_refresh")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all ClientRefresh records from the query.
func (q clientRefreshQuery) All(ctx context.Context, exec boil.ContextExecutor) (ClientRefreshSlice, error) {
	var o []*ClientRefresh

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to ClientRefresh slice")
	}

	if len(clientRefreshAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all ClientRefresh records in the query.
func (q clientRefreshQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count client_refresh rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q clientRefreshQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if client_refresh exists")
	}

	return count > 0, nil
}

// ClientRefreshes retrieves all the records using an executor.
func ClientRefreshes(mods ...qm.QueryMod) clientRefreshQuery {
	mods = append(mods, qm.From("`client_refresh`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`client_refresh`.*"})
	}

	return clientRefreshQuery{q}
}

// FindClientRefresh retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindClientRefresh(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*ClientRefresh, error) {
	clientRefreshObj := &ClientRefresh{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `client_refresh` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, clientRefreshObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from client_refresh")
	}

	if err = clientRefreshObj.doAfterSelectHooks(ctx, exec); err != nil {
		return clientRefreshObj, err
	}

	return clientRefreshObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ClientRefresh) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no client_refresh provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(clientRefreshColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	clientRefreshInsertCacheMut.RLock()
	cache, cached := clientRefreshInsertCache[key]
	clientRefreshInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			clientRefreshAllColumns,
			clientRefreshColumnsWithDefault,
			clientRefreshColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(clientRefreshType, clientRefreshMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(clientRefreshType, clientRefreshMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `client_refresh` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `client_refresh` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `client_refresh` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, clientRefreshPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into client_refresh")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for client_refresh")
	}

CacheNoHooks:
	if !cached {
		clientRefreshInsertCacheMut.Lock()
		clientRefreshInsertCache[key] = cache
		clientRefreshInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the ClientRefresh.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ClientRefresh) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	clientRefreshUpdateCacheMut.RLock()
	cache, cached := clientRefreshUpdateCache[key]
	clientRefreshUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			clientRefreshAllColumns,
			clientRefreshPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update client_refresh, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `client_refresh` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, clientRefreshPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(clientRefreshType, clientRefreshMapping, append(wl, clientRefreshPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update client_refresh row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for client_refresh")
	}

	if !cached {
		clientRefreshUpdateCacheMut.Lock()
		clientRefreshUpdateCache[key] = cache
		clientRefreshUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q clientRefreshQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for client_refresh")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for client_refresh")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ClientRefreshSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clientRefreshPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `client_refresh` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, clientRefreshPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in clientRefresh slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all clientRefresh")
	}
	return rowsAff, nil
}

var mySQLClientRefreshUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ClientRefresh) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no client_refresh provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(clientRefreshColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLClientRefreshUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	clientRefreshUpsertCacheMut.RLock()
	cache, cached := clientRefreshUpsertCache[key]
	clientRefreshUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			clientRefreshAllColumns,
			clientRefreshColumnsWithDefault,
			clientRefreshColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			clientRefreshAllColumns,
			clientRefreshPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert client_refresh, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`client_refresh`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `client_refresh` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(clientRefreshType, clientRefreshMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(clientRefreshType, clientRefreshMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for client_refresh")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(clientRefreshType, clientRefreshMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for client_refresh")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for client_refresh")
	}

CacheNoHooks:
	if !cached {
		clientRefreshUpsertCacheMut.Lock()
		clientRefreshUpsertCache[key] = cache
		clientRefreshUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single ClientRefresh record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ClientRefresh) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no ClientRefresh provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), clientRefreshPrimaryKeyMapping)
	sql := "DELETE FROM `client_refresh` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from client_refresh")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for client_refresh")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q clientRefreshQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no clientRefreshQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from client_refresh")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for client_refresh")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ClientRefreshSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(clientRefreshBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clientRefreshPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `client_refresh` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, clientRefreshPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from clientRefresh slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for client_refresh")
	}

	if len(clientRefreshAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ClientRefresh) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindClientRefresh(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClientRefreshSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ClientRefreshSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clientRefreshPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `client_refresh`.* FROM `client_refresh` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, clientRefreshPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in ClientRefreshSlice")
	}

	*o = slice

	return nil
}

// ClientRefreshExists checks if the ClientRefresh row exists.
func ClientRefreshExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `client_refresh` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if client_refresh exists")
	}

	return exists, nil
}

// Exists checks if the ClientRefresh row exists.
func (o *ClientRefresh) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ClientRefreshExists(ctx, exec, o.ID)
}
