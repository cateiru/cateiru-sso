// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testClients(t *testing.T) {
	t.Parallel()

	query := Clients()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testClientsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Client{}
	if err = randomize.Struct(seed, o, clientDBTypes, true, clientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Client struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Clients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testClientsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Client{}
	if err = randomize.Struct(seed, o, clientDBTypes, true, clientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Client struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Clients().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Clients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testClientsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Client{}
	if err = randomize.Struct(seed, o, clientDBTypes, true, clientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Client struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ClientSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Clients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testClientsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Client{}
	if err = randomize.Struct(seed, o, clientDBTypes, true, clientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Client struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := ClientExists(ctx, tx, o.ClientID)
	if err != nil {
		t.Errorf("Unable to check if Client exists: %s", err)
	}
	if !e {
		t.Errorf("Expected ClientExists to return true, but got false.")
	}
}

func testClientsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Client{}
	if err = randomize.Struct(seed, o, clientDBTypes, true, clientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Client struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	clientFound, err := FindClient(ctx, tx, o.ClientID)
	if err != nil {
		t.Error(err)
	}

	if clientFound == nil {
		t.Error("want a record, got nil")
	}
}

func testClientsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Client{}
	if err = randomize.Struct(seed, o, clientDBTypes, true, clientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Client struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Clients().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testClientsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Client{}
	if err = randomize.Struct(seed, o, clientDBTypes, true, clientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Client struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Clients().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testClientsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	clientOne := &Client{}
	clientTwo := &Client{}
	if err = randomize.Struct(seed, clientOne, clientDBTypes, false, clientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Client struct: %s", err)
	}
	if err = randomize.Struct(seed, clientTwo, clientDBTypes, false, clientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Client struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = clientOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = clientTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Clients().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testClientsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	clientOne := &Client{}
	clientTwo := &Client{}
	if err = randomize.Struct(seed, clientOne, clientDBTypes, false, clientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Client struct: %s", err)
	}
	if err = randomize.Struct(seed, clientTwo, clientDBTypes, false, clientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Client struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = clientOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = clientTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Clients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func clientBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Client) error {
	*o = Client{}
	return nil
}

func clientAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Client) error {
	*o = Client{}
	return nil
}

func clientAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Client) error {
	*o = Client{}
	return nil
}

func clientBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Client) error {
	*o = Client{}
	return nil
}

func clientAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Client) error {
	*o = Client{}
	return nil
}

func clientBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Client) error {
	*o = Client{}
	return nil
}

func clientAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Client) error {
	*o = Client{}
	return nil
}

func clientBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Client) error {
	*o = Client{}
	return nil
}

func clientAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Client) error {
	*o = Client{}
	return nil
}

func testClientsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Client{}
	o := &Client{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, clientDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Client object: %s", err)
	}

	AddClientHook(boil.BeforeInsertHook, clientBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	clientBeforeInsertHooks = []ClientHook{}

	AddClientHook(boil.AfterInsertHook, clientAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	clientAfterInsertHooks = []ClientHook{}

	AddClientHook(boil.AfterSelectHook, clientAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	clientAfterSelectHooks = []ClientHook{}

	AddClientHook(boil.BeforeUpdateHook, clientBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	clientBeforeUpdateHooks = []ClientHook{}

	AddClientHook(boil.AfterUpdateHook, clientAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	clientAfterUpdateHooks = []ClientHook{}

	AddClientHook(boil.BeforeDeleteHook, clientBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	clientBeforeDeleteHooks = []ClientHook{}

	AddClientHook(boil.AfterDeleteHook, clientAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	clientAfterDeleteHooks = []ClientHook{}

	AddClientHook(boil.BeforeUpsertHook, clientBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	clientBeforeUpsertHooks = []ClientHook{}

	AddClientHook(boil.AfterUpsertHook, clientAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	clientAfterUpsertHooks = []ClientHook{}
}

func testClientsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Client{}
	if err = randomize.Struct(seed, o, clientDBTypes, true, clientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Client struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Clients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testClientsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Client{}
	if err = randomize.Struct(seed, o, clientDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Client struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(clientColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Clients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testClientOneToOneClientAllowRuleUsingClientAllowRule(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var foreign ClientAllowRule
	var local Client

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &foreign, clientAllowRuleDBTypes, true, clientAllowRuleColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize ClientAllowRule struct: %s", err)
	}
	if err := randomize.Struct(seed, &local, clientDBTypes, true, clientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Client struct: %s", err)
	}

	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreign.ClientID = local.ClientID
	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.ClientAllowRule().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ClientID != foreign.ClientID {
		t.Errorf("want: %v, got %v", foreign.ClientID, check.ClientID)
	}

	ranAfterSelectHook := false
	AddClientAllowRuleHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *ClientAllowRule) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ClientSlice{&local}
	if err = local.L.LoadClientAllowRule(ctx, tx, false, (*[]*Client)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ClientAllowRule == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.ClientAllowRule = nil
	if err = local.L.LoadClientAllowRule(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.ClientAllowRule == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testClientOneToOneSetOpClientAllowRuleUsingClientAllowRule(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Client
	var b, c ClientAllowRule

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, clientDBTypes, false, strmangle.SetComplement(clientPrimaryKeyColumns, clientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, clientAllowRuleDBTypes, false, strmangle.SetComplement(clientAllowRulePrimaryKeyColumns, clientAllowRuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, clientAllowRuleDBTypes, false, strmangle.SetComplement(clientAllowRulePrimaryKeyColumns, clientAllowRuleColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*ClientAllowRule{&b, &c} {
		err = a.SetClientAllowRule(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.ClientAllowRule != x {
			t.Error("relationship struct not set to correct value")
		}
		if x.R.Client != &a {
			t.Error("failed to append to foreign relationship struct")
		}

		if a.ClientID != x.ClientID {
			t.Error("foreign key was wrong value", a.ClientID)
		}

		if exists, err := ClientAllowRuleExists(ctx, tx, x.ClientID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'x' to exist")
		}

		if a.ClientID != x.ClientID {
			t.Error("foreign key was wrong value", a.ClientID, x.ClientID)
		}

		if _, err = x.Delete(ctx, tx); err != nil {
			t.Fatal("failed to delete x", err)
		}
	}
}

func testClientToManyClientScopes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Client
	var b, c ClientScope

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, clientDBTypes, true, clientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Client struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, clientScopeDBTypes, false, clientScopeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, clientScopeDBTypes, false, clientScopeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ClientID = a.ClientID
	c.ClientID = a.ClientID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ClientScopes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ClientID == b.ClientID {
			bFound = true
		}
		if v.ClientID == c.ClientID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ClientSlice{&a}
	if err = a.L.LoadClientScopes(ctx, tx, false, (*[]*Client)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ClientScopes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ClientScopes = nil
	if err = a.L.LoadClientScopes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ClientScopes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testClientToManyLoginClientHistories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Client
	var b, c LoginClientHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, clientDBTypes, true, clientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Client struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, loginClientHistoryDBTypes, false, loginClientHistoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, loginClientHistoryDBTypes, false, loginClientHistoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ClientID = a.ClientID
	c.ClientID = a.ClientID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.LoginClientHistories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ClientID == b.ClientID {
			bFound = true
		}
		if v.ClientID == c.ClientID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ClientSlice{&a}
	if err = a.L.LoadLoginClientHistories(ctx, tx, false, (*[]*Client)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LoginClientHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.LoginClientHistories = nil
	if err = a.L.LoadLoginClientHistories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.LoginClientHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testClientToManyOauthSessions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Client
	var b, c OauthSession

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, clientDBTypes, true, clientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Client struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, oauthSessionDBTypes, false, oauthSessionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, oauthSessionDBTypes, false, oauthSessionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.ClientID = a.ClientID
	c.ClientID = a.ClientID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.OauthSessions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.ClientID == b.ClientID {
			bFound = true
		}
		if v.ClientID == c.ClientID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := ClientSlice{&a}
	if err = a.L.LoadOauthSessions(ctx, tx, false, (*[]*Client)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OauthSessions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.OauthSessions = nil
	if err = a.L.LoadOauthSessions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.OauthSessions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testClientToManyAddOpClientScopes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Client
	var b, c, d, e ClientScope

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, clientDBTypes, false, strmangle.SetComplement(clientPrimaryKeyColumns, clientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*ClientScope{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, clientScopeDBTypes, false, strmangle.SetComplement(clientScopePrimaryKeyColumns, clientScopeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*ClientScope{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddClientScopes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ClientID != first.ClientID {
			t.Error("foreign key was wrong value", a.ClientID, first.ClientID)
		}
		if a.ClientID != second.ClientID {
			t.Error("foreign key was wrong value", a.ClientID, second.ClientID)
		}

		if first.R.Client != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Client != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ClientScopes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ClientScopes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ClientScopes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testClientToManyAddOpLoginClientHistories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Client
	var b, c, d, e LoginClientHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, clientDBTypes, false, strmangle.SetComplement(clientPrimaryKeyColumns, clientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*LoginClientHistory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, loginClientHistoryDBTypes, false, strmangle.SetComplement(loginClientHistoryPrimaryKeyColumns, loginClientHistoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*LoginClientHistory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddLoginClientHistories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ClientID != first.ClientID {
			t.Error("foreign key was wrong value", a.ClientID, first.ClientID)
		}
		if a.ClientID != second.ClientID {
			t.Error("foreign key was wrong value", a.ClientID, second.ClientID)
		}

		if first.R.Client != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Client != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.LoginClientHistories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.LoginClientHistories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.LoginClientHistories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testClientToManyAddOpOauthSessions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Client
	var b, c, d, e OauthSession

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, clientDBTypes, false, strmangle.SetComplement(clientPrimaryKeyColumns, clientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*OauthSession{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, oauthSessionDBTypes, false, strmangle.SetComplement(oauthSessionPrimaryKeyColumns, oauthSessionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*OauthSession{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddOauthSessions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ClientID != first.ClientID {
			t.Error("foreign key was wrong value", a.ClientID, first.ClientID)
		}
		if a.ClientID != second.ClientID {
			t.Error("foreign key was wrong value", a.ClientID, second.ClientID)
		}

		if first.R.Client != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Client != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.OauthSessions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.OauthSessions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.OauthSessions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testClientToOneUserUsingOwnerUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local Client
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, clientDBTypes, false, clientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Client struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.OwnerUserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.OwnerUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := ClientSlice{&local}
	if err = local.L.LoadOwnerUser(ctx, tx, false, (*[]*Client)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OwnerUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.OwnerUser = nil
	if err = local.L.LoadOwnerUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.OwnerUser == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testClientToOneSetOpUserUsingOwnerUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Client
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, clientDBTypes, false, strmangle.SetComplement(clientPrimaryKeyColumns, clientColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetOwnerUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.OwnerUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OwnerUserClients[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.OwnerUserID != x.ID {
			t.Error("foreign key was wrong value", a.OwnerUserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OwnerUserID))
		reflect.Indirect(reflect.ValueOf(&a.OwnerUserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.OwnerUserID != x.ID {
			t.Error("foreign key was wrong value", a.OwnerUserID, x.ID)
		}
	}
}

func testClientsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Client{}
	if err = randomize.Struct(seed, o, clientDBTypes, true, clientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Client struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testClientsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Client{}
	if err = randomize.Struct(seed, o, clientDBTypes, true, clientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Client struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := ClientSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testClientsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Client{}
	if err = randomize.Struct(seed, o, clientDBTypes, true, clientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Client struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Clients().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	clientDBTypes = map[string]string{`ClientID`: `varchar`, `Name`: `varchar`, `Description`: `text`, `Image`: `text`, `IsAllow`: `tinyint`, `Prompt`: `enum('login','2fa_login')`, `OwnerUserID`: `varchar`, `ClientSecret`: `varchar`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`}
	_             = bytes.MinRead
)

func testClientsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(clientPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(clientAllColumns) == len(clientPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Client{}
	if err = randomize.Struct(seed, o, clientDBTypes, true, clientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Client struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Clients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, clientDBTypes, true, clientPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Client struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testClientsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(clientAllColumns) == len(clientPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Client{}
	if err = randomize.Struct(seed, o, clientDBTypes, true, clientColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Client struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Clients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, clientDBTypes, true, clientPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Client struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(clientAllColumns, clientPrimaryKeyColumns) {
		fields = clientAllColumns
	} else {
		fields = strmangle.SetComplement(
			clientAllColumns,
			clientPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := ClientSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testClientsUpsert(t *testing.T) {
	t.Parallel()

	if len(clientAllColumns) == len(clientPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLClientUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Client{}
	if err = randomize.Struct(seed, &o, clientDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Client struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Client: %s", err)
	}

	count, err := Clients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, clientDBTypes, false, clientPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Client struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Client: %s", err)
	}

	count, err = Clients().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
