// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// EmailVerify is an object representing the database table.
type EmailVerify struct {
	ID         []byte    `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID     []byte    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	VerifyCode string    `boil:"verify_code" json:"verify_code" toml:"verify_code" yaml:"verify_code"`
	Period     time.Time `boil:"period" json:"period" toml:"period" yaml:"period"`
	RetryCount uint8     `boil:"retry_count" json:"retry_count" toml:"retry_count" yaml:"retry_count"`
	Created    time.Time `boil:"created" json:"created" toml:"created" yaml:"created"`
	Modified   time.Time `boil:"modified" json:"modified" toml:"modified" yaml:"modified"`

	R *emailVerifyR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L emailVerifyL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EmailVerifyColumns = struct {
	ID         string
	UserID     string
	VerifyCode string
	Period     string
	RetryCount string
	Created    string
	Modified   string
}{
	ID:         "id",
	UserID:     "user_id",
	VerifyCode: "verify_code",
	Period:     "period",
	RetryCount: "retry_count",
	Created:    "created",
	Modified:   "modified",
}

var EmailVerifyTableColumns = struct {
	ID         string
	UserID     string
	VerifyCode string
	Period     string
	RetryCount string
	Created    string
	Modified   string
}{
	ID:         "email_verify.id",
	UserID:     "email_verify.user_id",
	VerifyCode: "email_verify.verify_code",
	Period:     "email_verify.period",
	RetryCount: "email_verify.retry_count",
	Created:    "email_verify.created",
	Modified:   "email_verify.modified",
}

// Generated where

type whereHelperuint8 struct{ field string }

func (w whereHelperuint8) EQ(x uint8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperuint8) NEQ(x uint8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperuint8) LT(x uint8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperuint8) LTE(x uint8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperuint8) GT(x uint8) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperuint8) GTE(x uint8) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperuint8) IN(slice []uint8) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperuint8) NIN(slice []uint8) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var EmailVerifyWhere = struct {
	ID         whereHelper__byte
	UserID     whereHelper__byte
	VerifyCode whereHelperstring
	Period     whereHelpertime_Time
	RetryCount whereHelperuint8
	Created    whereHelpertime_Time
	Modified   whereHelpertime_Time
}{
	ID:         whereHelper__byte{field: "`email_verify`.`id`"},
	UserID:     whereHelper__byte{field: "`email_verify`.`user_id`"},
	VerifyCode: whereHelperstring{field: "`email_verify`.`verify_code`"},
	Period:     whereHelpertime_Time{field: "`email_verify`.`period`"},
	RetryCount: whereHelperuint8{field: "`email_verify`.`retry_count`"},
	Created:    whereHelpertime_Time{field: "`email_verify`.`created`"},
	Modified:   whereHelpertime_Time{field: "`email_verify`.`modified`"},
}

// EmailVerifyRels is where relationship names are stored.
var EmailVerifyRels = struct {
}{}

// emailVerifyR is where relationships are stored.
type emailVerifyR struct {
}

// NewStruct creates a new relationship struct
func (*emailVerifyR) NewStruct() *emailVerifyR {
	return &emailVerifyR{}
}

// emailVerifyL is where Load methods for each relationship are stored.
type emailVerifyL struct{}

var (
	emailVerifyAllColumns            = []string{"id", "user_id", "verify_code", "period", "retry_count", "created", "modified"}
	emailVerifyColumnsWithoutDefault = []string{"id", "user_id", "verify_code"}
	emailVerifyColumnsWithDefault    = []string{"period", "retry_count", "created", "modified"}
	emailVerifyPrimaryKeyColumns     = []string{"id"}
	emailVerifyGeneratedColumns      = []string{}
)

type (
	// EmailVerifySlice is an alias for a slice of pointers to EmailVerify.
	// This should almost always be used instead of []EmailVerify.
	EmailVerifySlice []*EmailVerify
	// EmailVerifyHook is the signature for custom EmailVerify hook methods
	EmailVerifyHook func(context.Context, boil.ContextExecutor, *EmailVerify) error

	emailVerifyQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	emailVerifyType                 = reflect.TypeOf(&EmailVerify{})
	emailVerifyMapping              = queries.MakeStructMapping(emailVerifyType)
	emailVerifyPrimaryKeyMapping, _ = queries.BindMapping(emailVerifyType, emailVerifyMapping, emailVerifyPrimaryKeyColumns)
	emailVerifyInsertCacheMut       sync.RWMutex
	emailVerifyInsertCache          = make(map[string]insertCache)
	emailVerifyUpdateCacheMut       sync.RWMutex
	emailVerifyUpdateCache          = make(map[string]updateCache)
	emailVerifyUpsertCacheMut       sync.RWMutex
	emailVerifyUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var emailVerifyAfterSelectHooks []EmailVerifyHook

var emailVerifyBeforeInsertHooks []EmailVerifyHook
var emailVerifyAfterInsertHooks []EmailVerifyHook

var emailVerifyBeforeUpdateHooks []EmailVerifyHook
var emailVerifyAfterUpdateHooks []EmailVerifyHook

var emailVerifyBeforeDeleteHooks []EmailVerifyHook
var emailVerifyAfterDeleteHooks []EmailVerifyHook

var emailVerifyBeforeUpsertHooks []EmailVerifyHook
var emailVerifyAfterUpsertHooks []EmailVerifyHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *EmailVerify) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailVerifyAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *EmailVerify) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailVerifyBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *EmailVerify) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailVerifyAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *EmailVerify) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailVerifyBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *EmailVerify) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailVerifyAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *EmailVerify) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailVerifyBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *EmailVerify) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailVerifyAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *EmailVerify) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailVerifyBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *EmailVerify) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range emailVerifyAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEmailVerifyHook registers your hook function for all future operations.
func AddEmailVerifyHook(hookPoint boil.HookPoint, emailVerifyHook EmailVerifyHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		emailVerifyAfterSelectHooks = append(emailVerifyAfterSelectHooks, emailVerifyHook)
	case boil.BeforeInsertHook:
		emailVerifyBeforeInsertHooks = append(emailVerifyBeforeInsertHooks, emailVerifyHook)
	case boil.AfterInsertHook:
		emailVerifyAfterInsertHooks = append(emailVerifyAfterInsertHooks, emailVerifyHook)
	case boil.BeforeUpdateHook:
		emailVerifyBeforeUpdateHooks = append(emailVerifyBeforeUpdateHooks, emailVerifyHook)
	case boil.AfterUpdateHook:
		emailVerifyAfterUpdateHooks = append(emailVerifyAfterUpdateHooks, emailVerifyHook)
	case boil.BeforeDeleteHook:
		emailVerifyBeforeDeleteHooks = append(emailVerifyBeforeDeleteHooks, emailVerifyHook)
	case boil.AfterDeleteHook:
		emailVerifyAfterDeleteHooks = append(emailVerifyAfterDeleteHooks, emailVerifyHook)
	case boil.BeforeUpsertHook:
		emailVerifyBeforeUpsertHooks = append(emailVerifyBeforeUpsertHooks, emailVerifyHook)
	case boil.AfterUpsertHook:
		emailVerifyAfterUpsertHooks = append(emailVerifyAfterUpsertHooks, emailVerifyHook)
	}
}

// One returns a single emailVerify record from the query.
func (q emailVerifyQuery) One(ctx context.Context, exec boil.ContextExecutor) (*EmailVerify, error) {
	o := &EmailVerify{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for email_verify")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all EmailVerify records from the query.
func (q emailVerifyQuery) All(ctx context.Context, exec boil.ContextExecutor) (EmailVerifySlice, error) {
	var o []*EmailVerify

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to EmailVerify slice")
	}

	if len(emailVerifyAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all EmailVerify records in the query.
func (q emailVerifyQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count email_verify rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q emailVerifyQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if email_verify exists")
	}

	return count > 0, nil
}

// EmailVerifies retrieves all the records using an executor.
func EmailVerifies(mods ...qm.QueryMod) emailVerifyQuery {
	mods = append(mods, qm.From("`email_verify`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`email_verify`.*"})
	}

	return emailVerifyQuery{q}
}

// FindEmailVerify retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEmailVerify(ctx context.Context, exec boil.ContextExecutor, iD []byte, selectCols ...string) (*EmailVerify, error) {
	emailVerifyObj := &EmailVerify{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `email_verify` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, emailVerifyObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from email_verify")
	}

	if err = emailVerifyObj.doAfterSelectHooks(ctx, exec); err != nil {
		return emailVerifyObj, err
	}

	return emailVerifyObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *EmailVerify) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no email_verify provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(emailVerifyColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	emailVerifyInsertCacheMut.RLock()
	cache, cached := emailVerifyInsertCache[key]
	emailVerifyInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			emailVerifyAllColumns,
			emailVerifyColumnsWithDefault,
			emailVerifyColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(emailVerifyType, emailVerifyMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(emailVerifyType, emailVerifyMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `email_verify` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `email_verify` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `email_verify` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, emailVerifyPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into email_verify")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for email_verify")
	}

CacheNoHooks:
	if !cached {
		emailVerifyInsertCacheMut.Lock()
		emailVerifyInsertCache[key] = cache
		emailVerifyInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the EmailVerify.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *EmailVerify) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	emailVerifyUpdateCacheMut.RLock()
	cache, cached := emailVerifyUpdateCache[key]
	emailVerifyUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			emailVerifyAllColumns,
			emailVerifyPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update email_verify, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `email_verify` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, emailVerifyPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(emailVerifyType, emailVerifyMapping, append(wl, emailVerifyPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update email_verify row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for email_verify")
	}

	if !cached {
		emailVerifyUpdateCacheMut.Lock()
		emailVerifyUpdateCache[key] = cache
		emailVerifyUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q emailVerifyQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for email_verify")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for email_verify")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EmailVerifySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), emailVerifyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `email_verify` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, emailVerifyPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in emailVerify slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all emailVerify")
	}
	return rowsAff, nil
}

var mySQLEmailVerifyUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *EmailVerify) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no email_verify provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(emailVerifyColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLEmailVerifyUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	emailVerifyUpsertCacheMut.RLock()
	cache, cached := emailVerifyUpsertCache[key]
	emailVerifyUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			emailVerifyAllColumns,
			emailVerifyColumnsWithDefault,
			emailVerifyColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			emailVerifyAllColumns,
			emailVerifyPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert email_verify, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`email_verify`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `email_verify` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(emailVerifyType, emailVerifyMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(emailVerifyType, emailVerifyMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for email_verify")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(emailVerifyType, emailVerifyMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for email_verify")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for email_verify")
	}

CacheNoHooks:
	if !cached {
		emailVerifyUpsertCacheMut.Lock()
		emailVerifyUpsertCache[key] = cache
		emailVerifyUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single EmailVerify record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EmailVerify) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no EmailVerify provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), emailVerifyPrimaryKeyMapping)
	sql := "DELETE FROM `email_verify` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from email_verify")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for email_verify")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q emailVerifyQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no emailVerifyQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from email_verify")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for email_verify")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EmailVerifySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(emailVerifyBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), emailVerifyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `email_verify` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, emailVerifyPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from emailVerify slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for email_verify")
	}

	if len(emailVerifyAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EmailVerify) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindEmailVerify(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EmailVerifySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EmailVerifySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), emailVerifyPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `email_verify`.* FROM `email_verify` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, emailVerifyPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EmailVerifySlice")
	}

	*o = slice

	return nil
}

// EmailVerifyExists checks if the EmailVerify row exists.
func EmailVerifyExists(ctx context.Context, exec boil.ContextExecutor, iD []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `email_verify` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if email_verify exists")
	}

	return exists, nil
}

// Exists checks if the EmailVerify row exists.
func (o *EmailVerify) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return EmailVerifyExists(ctx, exec, o.ID)
}
