// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testEmailVerifySessions(t *testing.T) {
	t.Parallel()

	query := EmailVerifySessions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testEmailVerifySessionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EmailVerifySession{}
	if err = randomize.Struct(seed, o, emailVerifySessionDBTypes, true, emailVerifySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EmailVerifySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EmailVerifySessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEmailVerifySessionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EmailVerifySession{}
	if err = randomize.Struct(seed, o, emailVerifySessionDBTypes, true, emailVerifySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EmailVerifySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := EmailVerifySessions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EmailVerifySessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEmailVerifySessionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EmailVerifySession{}
	if err = randomize.Struct(seed, o, emailVerifySessionDBTypes, true, emailVerifySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EmailVerifySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EmailVerifySessionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EmailVerifySessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEmailVerifySessionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EmailVerifySession{}
	if err = randomize.Struct(seed, o, emailVerifySessionDBTypes, true, emailVerifySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EmailVerifySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := EmailVerifySessionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if EmailVerifySession exists: %s", err)
	}
	if !e {
		t.Errorf("Expected EmailVerifySessionExists to return true, but got false.")
	}
}

func testEmailVerifySessionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EmailVerifySession{}
	if err = randomize.Struct(seed, o, emailVerifySessionDBTypes, true, emailVerifySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EmailVerifySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	emailVerifySessionFound, err := FindEmailVerifySession(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if emailVerifySessionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testEmailVerifySessionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EmailVerifySession{}
	if err = randomize.Struct(seed, o, emailVerifySessionDBTypes, true, emailVerifySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EmailVerifySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = EmailVerifySessions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testEmailVerifySessionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EmailVerifySession{}
	if err = randomize.Struct(seed, o, emailVerifySessionDBTypes, true, emailVerifySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EmailVerifySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := EmailVerifySessions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testEmailVerifySessionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	emailVerifySessionOne := &EmailVerifySession{}
	emailVerifySessionTwo := &EmailVerifySession{}
	if err = randomize.Struct(seed, emailVerifySessionOne, emailVerifySessionDBTypes, false, emailVerifySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EmailVerifySession struct: %s", err)
	}
	if err = randomize.Struct(seed, emailVerifySessionTwo, emailVerifySessionDBTypes, false, emailVerifySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EmailVerifySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = emailVerifySessionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = emailVerifySessionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := EmailVerifySessions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testEmailVerifySessionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	emailVerifySessionOne := &EmailVerifySession{}
	emailVerifySessionTwo := &EmailVerifySession{}
	if err = randomize.Struct(seed, emailVerifySessionOne, emailVerifySessionDBTypes, false, emailVerifySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EmailVerifySession struct: %s", err)
	}
	if err = randomize.Struct(seed, emailVerifySessionTwo, emailVerifySessionDBTypes, false, emailVerifySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EmailVerifySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = emailVerifySessionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = emailVerifySessionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EmailVerifySessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func emailVerifySessionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *EmailVerifySession) error {
	*o = EmailVerifySession{}
	return nil
}

func emailVerifySessionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *EmailVerifySession) error {
	*o = EmailVerifySession{}
	return nil
}

func emailVerifySessionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *EmailVerifySession) error {
	*o = EmailVerifySession{}
	return nil
}

func emailVerifySessionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *EmailVerifySession) error {
	*o = EmailVerifySession{}
	return nil
}

func emailVerifySessionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *EmailVerifySession) error {
	*o = EmailVerifySession{}
	return nil
}

func emailVerifySessionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *EmailVerifySession) error {
	*o = EmailVerifySession{}
	return nil
}

func emailVerifySessionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *EmailVerifySession) error {
	*o = EmailVerifySession{}
	return nil
}

func emailVerifySessionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *EmailVerifySession) error {
	*o = EmailVerifySession{}
	return nil
}

func emailVerifySessionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *EmailVerifySession) error {
	*o = EmailVerifySession{}
	return nil
}

func testEmailVerifySessionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &EmailVerifySession{}
	o := &EmailVerifySession{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, emailVerifySessionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize EmailVerifySession object: %s", err)
	}

	AddEmailVerifySessionHook(boil.BeforeInsertHook, emailVerifySessionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	emailVerifySessionBeforeInsertHooks = []EmailVerifySessionHook{}

	AddEmailVerifySessionHook(boil.AfterInsertHook, emailVerifySessionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	emailVerifySessionAfterInsertHooks = []EmailVerifySessionHook{}

	AddEmailVerifySessionHook(boil.AfterSelectHook, emailVerifySessionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	emailVerifySessionAfterSelectHooks = []EmailVerifySessionHook{}

	AddEmailVerifySessionHook(boil.BeforeUpdateHook, emailVerifySessionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	emailVerifySessionBeforeUpdateHooks = []EmailVerifySessionHook{}

	AddEmailVerifySessionHook(boil.AfterUpdateHook, emailVerifySessionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	emailVerifySessionAfterUpdateHooks = []EmailVerifySessionHook{}

	AddEmailVerifySessionHook(boil.BeforeDeleteHook, emailVerifySessionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	emailVerifySessionBeforeDeleteHooks = []EmailVerifySessionHook{}

	AddEmailVerifySessionHook(boil.AfterDeleteHook, emailVerifySessionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	emailVerifySessionAfterDeleteHooks = []EmailVerifySessionHook{}

	AddEmailVerifySessionHook(boil.BeforeUpsertHook, emailVerifySessionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	emailVerifySessionBeforeUpsertHooks = []EmailVerifySessionHook{}

	AddEmailVerifySessionHook(boil.AfterUpsertHook, emailVerifySessionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	emailVerifySessionAfterUpsertHooks = []EmailVerifySessionHook{}
}

func testEmailVerifySessionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EmailVerifySession{}
	if err = randomize.Struct(seed, o, emailVerifySessionDBTypes, true, emailVerifySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EmailVerifySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EmailVerifySessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEmailVerifySessionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EmailVerifySession{}
	if err = randomize.Struct(seed, o, emailVerifySessionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize EmailVerifySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(emailVerifySessionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := EmailVerifySessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEmailVerifySessionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EmailVerifySession{}
	if err = randomize.Struct(seed, o, emailVerifySessionDBTypes, true, emailVerifySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EmailVerifySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEmailVerifySessionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EmailVerifySession{}
	if err = randomize.Struct(seed, o, emailVerifySessionDBTypes, true, emailVerifySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EmailVerifySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EmailVerifySessionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testEmailVerifySessionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EmailVerifySession{}
	if err = randomize.Struct(seed, o, emailVerifySessionDBTypes, true, emailVerifySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EmailVerifySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := EmailVerifySessions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	emailVerifySessionDBTypes = map[string]string{`ID`: `varchar`, `UserID`: `varchar`, `VerifyCode`: `char`, `Period`: `datetime`, `RetryCount`: `tinyint`, `Created`: `datetime`, `Modified`: `datetime`}
	_                         = bytes.MinRead
)

func testEmailVerifySessionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(emailVerifySessionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(emailVerifySessionAllColumns) == len(emailVerifySessionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &EmailVerifySession{}
	if err = randomize.Struct(seed, o, emailVerifySessionDBTypes, true, emailVerifySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EmailVerifySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EmailVerifySessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, emailVerifySessionDBTypes, true, emailVerifySessionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EmailVerifySession struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testEmailVerifySessionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(emailVerifySessionAllColumns) == len(emailVerifySessionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &EmailVerifySession{}
	if err = randomize.Struct(seed, o, emailVerifySessionDBTypes, true, emailVerifySessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EmailVerifySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EmailVerifySessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, emailVerifySessionDBTypes, true, emailVerifySessionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EmailVerifySession struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(emailVerifySessionAllColumns, emailVerifySessionPrimaryKeyColumns) {
		fields = emailVerifySessionAllColumns
	} else {
		fields = strmangle.SetComplement(
			emailVerifySessionAllColumns,
			emailVerifySessionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := EmailVerifySessionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testEmailVerifySessionsUpsert(t *testing.T) {
	t.Parallel()

	if len(emailVerifySessionAllColumns) == len(emailVerifySessionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLEmailVerifySessionUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := EmailVerifySession{}
	if err = randomize.Struct(seed, &o, emailVerifySessionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize EmailVerifySession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert EmailVerifySession: %s", err)
	}

	count, err := EmailVerifySessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, emailVerifySessionDBTypes, false, emailVerifySessionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EmailVerifySession struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert EmailVerifySession: %s", err)
	}

	count, err = EmailVerifySessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
