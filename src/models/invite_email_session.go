// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// InviteEmailSession is an object representing the database table.
type InviteEmailSession struct {
	ID        string    `boil:"id" json:"id" toml:"id" yaml:"id"`
	Email     string    `boil:"email" json:"email" toml:"email" yaml:"email"`
	Period    time.Time `boil:"period" json:"period" toml:"period" yaml:"period"`
	OrgID     string    `boil:"org_id" json:"org_id" toml:"org_id" yaml:"org_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *inviteEmailSessionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L inviteEmailSessionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var InviteEmailSessionColumns = struct {
	ID        string
	Email     string
	Period    string
	OrgID     string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "id",
	Email:     "email",
	Period:    "period",
	OrgID:     "org_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
}

var InviteEmailSessionTableColumns = struct {
	ID        string
	Email     string
	Period    string
	OrgID     string
	CreatedAt string
	UpdatedAt string
}{
	ID:        "invite_email_session.id",
	Email:     "invite_email_session.email",
	Period:    "invite_email_session.period",
	OrgID:     "invite_email_session.org_id",
	CreatedAt: "invite_email_session.created_at",
	UpdatedAt: "invite_email_session.updated_at",
}

// Generated where

var InviteEmailSessionWhere = struct {
	ID        whereHelperstring
	Email     whereHelperstring
	Period    whereHelpertime_Time
	OrgID     whereHelperstring
	CreatedAt whereHelpertime_Time
	UpdatedAt whereHelpertime_Time
}{
	ID:        whereHelperstring{field: "`invite_email_session`.`id`"},
	Email:     whereHelperstring{field: "`invite_email_session`.`email`"},
	Period:    whereHelpertime_Time{field: "`invite_email_session`.`period`"},
	OrgID:     whereHelperstring{field: "`invite_email_session`.`org_id`"},
	CreatedAt: whereHelpertime_Time{field: "`invite_email_session`.`created_at`"},
	UpdatedAt: whereHelpertime_Time{field: "`invite_email_session`.`updated_at`"},
}

// InviteEmailSessionRels is where relationship names are stored.
var InviteEmailSessionRels = struct {
}{}

// inviteEmailSessionR is where relationships are stored.
type inviteEmailSessionR struct {
}

// NewStruct creates a new relationship struct
func (*inviteEmailSessionR) NewStruct() *inviteEmailSessionR {
	return &inviteEmailSessionR{}
}

// inviteEmailSessionL is where Load methods for each relationship are stored.
type inviteEmailSessionL struct{}

var (
	inviteEmailSessionAllColumns            = []string{"id", "email", "period", "org_id", "created_at", "updated_at"}
	inviteEmailSessionColumnsWithoutDefault = []string{"id", "email", "org_id"}
	inviteEmailSessionColumnsWithDefault    = []string{"period", "created_at", "updated_at"}
	inviteEmailSessionPrimaryKeyColumns     = []string{"id"}
	inviteEmailSessionGeneratedColumns      = []string{}
)

type (
	// InviteEmailSessionSlice is an alias for a slice of pointers to InviteEmailSession.
	// This should almost always be used instead of []InviteEmailSession.
	InviteEmailSessionSlice []*InviteEmailSession
	// InviteEmailSessionHook is the signature for custom InviteEmailSession hook methods
	InviteEmailSessionHook func(context.Context, boil.ContextExecutor, *InviteEmailSession) error

	inviteEmailSessionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	inviteEmailSessionType                 = reflect.TypeOf(&InviteEmailSession{})
	inviteEmailSessionMapping              = queries.MakeStructMapping(inviteEmailSessionType)
	inviteEmailSessionPrimaryKeyMapping, _ = queries.BindMapping(inviteEmailSessionType, inviteEmailSessionMapping, inviteEmailSessionPrimaryKeyColumns)
	inviteEmailSessionInsertCacheMut       sync.RWMutex
	inviteEmailSessionInsertCache          = make(map[string]insertCache)
	inviteEmailSessionUpdateCacheMut       sync.RWMutex
	inviteEmailSessionUpdateCache          = make(map[string]updateCache)
	inviteEmailSessionUpsertCacheMut       sync.RWMutex
	inviteEmailSessionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var inviteEmailSessionAfterSelectHooks []InviteEmailSessionHook

var inviteEmailSessionBeforeInsertHooks []InviteEmailSessionHook
var inviteEmailSessionAfterInsertHooks []InviteEmailSessionHook

var inviteEmailSessionBeforeUpdateHooks []InviteEmailSessionHook
var inviteEmailSessionAfterUpdateHooks []InviteEmailSessionHook

var inviteEmailSessionBeforeDeleteHooks []InviteEmailSessionHook
var inviteEmailSessionAfterDeleteHooks []InviteEmailSessionHook

var inviteEmailSessionBeforeUpsertHooks []InviteEmailSessionHook
var inviteEmailSessionAfterUpsertHooks []InviteEmailSessionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *InviteEmailSession) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteEmailSessionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *InviteEmailSession) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteEmailSessionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *InviteEmailSession) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteEmailSessionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *InviteEmailSession) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteEmailSessionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *InviteEmailSession) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteEmailSessionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *InviteEmailSession) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteEmailSessionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *InviteEmailSession) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteEmailSessionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *InviteEmailSession) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteEmailSessionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *InviteEmailSession) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range inviteEmailSessionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddInviteEmailSessionHook registers your hook function for all future operations.
func AddInviteEmailSessionHook(hookPoint boil.HookPoint, inviteEmailSessionHook InviteEmailSessionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		inviteEmailSessionAfterSelectHooks = append(inviteEmailSessionAfterSelectHooks, inviteEmailSessionHook)
	case boil.BeforeInsertHook:
		inviteEmailSessionBeforeInsertHooks = append(inviteEmailSessionBeforeInsertHooks, inviteEmailSessionHook)
	case boil.AfterInsertHook:
		inviteEmailSessionAfterInsertHooks = append(inviteEmailSessionAfterInsertHooks, inviteEmailSessionHook)
	case boil.BeforeUpdateHook:
		inviteEmailSessionBeforeUpdateHooks = append(inviteEmailSessionBeforeUpdateHooks, inviteEmailSessionHook)
	case boil.AfterUpdateHook:
		inviteEmailSessionAfterUpdateHooks = append(inviteEmailSessionAfterUpdateHooks, inviteEmailSessionHook)
	case boil.BeforeDeleteHook:
		inviteEmailSessionBeforeDeleteHooks = append(inviteEmailSessionBeforeDeleteHooks, inviteEmailSessionHook)
	case boil.AfterDeleteHook:
		inviteEmailSessionAfterDeleteHooks = append(inviteEmailSessionAfterDeleteHooks, inviteEmailSessionHook)
	case boil.BeforeUpsertHook:
		inviteEmailSessionBeforeUpsertHooks = append(inviteEmailSessionBeforeUpsertHooks, inviteEmailSessionHook)
	case boil.AfterUpsertHook:
		inviteEmailSessionAfterUpsertHooks = append(inviteEmailSessionAfterUpsertHooks, inviteEmailSessionHook)
	}
}

// One returns a single inviteEmailSession record from the query.
func (q inviteEmailSessionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*InviteEmailSession, error) {
	o := &InviteEmailSession{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for invite_email_session")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all InviteEmailSession records from the query.
func (q inviteEmailSessionQuery) All(ctx context.Context, exec boil.ContextExecutor) (InviteEmailSessionSlice, error) {
	var o []*InviteEmailSession

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to InviteEmailSession slice")
	}

	if len(inviteEmailSessionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all InviteEmailSession records in the query.
func (q inviteEmailSessionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count invite_email_session rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q inviteEmailSessionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if invite_email_session exists")
	}

	return count > 0, nil
}

// InviteEmailSessions retrieves all the records using an executor.
func InviteEmailSessions(mods ...qm.QueryMod) inviteEmailSessionQuery {
	mods = append(mods, qm.From("`invite_email_session`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`invite_email_session`.*"})
	}

	return inviteEmailSessionQuery{q}
}

// FindInviteEmailSession retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindInviteEmailSession(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*InviteEmailSession, error) {
	inviteEmailSessionObj := &InviteEmailSession{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `invite_email_session` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, inviteEmailSessionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from invite_email_session")
	}

	if err = inviteEmailSessionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return inviteEmailSessionObj, err
	}

	return inviteEmailSessionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *InviteEmailSession) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no invite_email_session provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(inviteEmailSessionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	inviteEmailSessionInsertCacheMut.RLock()
	cache, cached := inviteEmailSessionInsertCache[key]
	inviteEmailSessionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			inviteEmailSessionAllColumns,
			inviteEmailSessionColumnsWithDefault,
			inviteEmailSessionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(inviteEmailSessionType, inviteEmailSessionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(inviteEmailSessionType, inviteEmailSessionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `invite_email_session` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `invite_email_session` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `invite_email_session` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, inviteEmailSessionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into invite_email_session")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for invite_email_session")
	}

CacheNoHooks:
	if !cached {
		inviteEmailSessionInsertCacheMut.Lock()
		inviteEmailSessionInsertCache[key] = cache
		inviteEmailSessionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the InviteEmailSession.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *InviteEmailSession) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	inviteEmailSessionUpdateCacheMut.RLock()
	cache, cached := inviteEmailSessionUpdateCache[key]
	inviteEmailSessionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			inviteEmailSessionAllColumns,
			inviteEmailSessionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update invite_email_session, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `invite_email_session` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, inviteEmailSessionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(inviteEmailSessionType, inviteEmailSessionMapping, append(wl, inviteEmailSessionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update invite_email_session row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for invite_email_session")
	}

	if !cached {
		inviteEmailSessionUpdateCacheMut.Lock()
		inviteEmailSessionUpdateCache[key] = cache
		inviteEmailSessionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q inviteEmailSessionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for invite_email_session")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for invite_email_session")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o InviteEmailSessionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inviteEmailSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `invite_email_session` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, inviteEmailSessionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in inviteEmailSession slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all inviteEmailSession")
	}
	return rowsAff, nil
}

var mySQLInviteEmailSessionUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *InviteEmailSession) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no invite_email_session provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(inviteEmailSessionColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLInviteEmailSessionUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	inviteEmailSessionUpsertCacheMut.RLock()
	cache, cached := inviteEmailSessionUpsertCache[key]
	inviteEmailSessionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			inviteEmailSessionAllColumns,
			inviteEmailSessionColumnsWithDefault,
			inviteEmailSessionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			inviteEmailSessionAllColumns,
			inviteEmailSessionPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert invite_email_session, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`invite_email_session`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `invite_email_session` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(inviteEmailSessionType, inviteEmailSessionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(inviteEmailSessionType, inviteEmailSessionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for invite_email_session")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(inviteEmailSessionType, inviteEmailSessionMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for invite_email_session")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for invite_email_session")
	}

CacheNoHooks:
	if !cached {
		inviteEmailSessionUpsertCacheMut.Lock()
		inviteEmailSessionUpsertCache[key] = cache
		inviteEmailSessionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single InviteEmailSession record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *InviteEmailSession) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no InviteEmailSession provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), inviteEmailSessionPrimaryKeyMapping)
	sql := "DELETE FROM `invite_email_session` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from invite_email_session")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for invite_email_session")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q inviteEmailSessionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no inviteEmailSessionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from invite_email_session")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for invite_email_session")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o InviteEmailSessionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(inviteEmailSessionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inviteEmailSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `invite_email_session` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, inviteEmailSessionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from inviteEmailSession slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for invite_email_session")
	}

	if len(inviteEmailSessionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *InviteEmailSession) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindInviteEmailSession(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *InviteEmailSessionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := InviteEmailSessionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), inviteEmailSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `invite_email_session`.* FROM `invite_email_session` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, inviteEmailSessionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in InviteEmailSessionSlice")
	}

	*o = slice

	return nil
}

// InviteEmailSessionExists checks if the InviteEmailSession row exists.
func InviteEmailSessionExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `invite_email_session` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if invite_email_session exists")
	}

	return exists, nil
}

// Exists checks if the InviteEmailSession row exists.
func (o *InviteEmailSession) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return InviteEmailSessionExists(ctx, exec, o.ID)
}
