// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testInviteOrgSessions(t *testing.T) {
	t.Parallel()

	query := InviteOrgSessions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testInviteOrgSessionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InviteOrgSession{}
	if err = randomize.Struct(seed, o, inviteOrgSessionDBTypes, true, inviteOrgSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteOrgSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InviteOrgSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInviteOrgSessionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InviteOrgSession{}
	if err = randomize.Struct(seed, o, inviteOrgSessionDBTypes, true, inviteOrgSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteOrgSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := InviteOrgSessions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InviteOrgSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInviteOrgSessionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InviteOrgSession{}
	if err = randomize.Struct(seed, o, inviteOrgSessionDBTypes, true, inviteOrgSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteOrgSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InviteOrgSessionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := InviteOrgSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testInviteOrgSessionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InviteOrgSession{}
	if err = randomize.Struct(seed, o, inviteOrgSessionDBTypes, true, inviteOrgSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteOrgSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := InviteOrgSessionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if InviteOrgSession exists: %s", err)
	}
	if !e {
		t.Errorf("Expected InviteOrgSessionExists to return true, but got false.")
	}
}

func testInviteOrgSessionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InviteOrgSession{}
	if err = randomize.Struct(seed, o, inviteOrgSessionDBTypes, true, inviteOrgSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteOrgSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	inviteOrgSessionFound, err := FindInviteOrgSession(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if inviteOrgSessionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testInviteOrgSessionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InviteOrgSession{}
	if err = randomize.Struct(seed, o, inviteOrgSessionDBTypes, true, inviteOrgSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteOrgSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = InviteOrgSessions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testInviteOrgSessionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InviteOrgSession{}
	if err = randomize.Struct(seed, o, inviteOrgSessionDBTypes, true, inviteOrgSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteOrgSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := InviteOrgSessions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testInviteOrgSessionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	inviteOrgSessionOne := &InviteOrgSession{}
	inviteOrgSessionTwo := &InviteOrgSession{}
	if err = randomize.Struct(seed, inviteOrgSessionOne, inviteOrgSessionDBTypes, false, inviteOrgSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteOrgSession struct: %s", err)
	}
	if err = randomize.Struct(seed, inviteOrgSessionTwo, inviteOrgSessionDBTypes, false, inviteOrgSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteOrgSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = inviteOrgSessionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = inviteOrgSessionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := InviteOrgSessions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testInviteOrgSessionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	inviteOrgSessionOne := &InviteOrgSession{}
	inviteOrgSessionTwo := &InviteOrgSession{}
	if err = randomize.Struct(seed, inviteOrgSessionOne, inviteOrgSessionDBTypes, false, inviteOrgSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteOrgSession struct: %s", err)
	}
	if err = randomize.Struct(seed, inviteOrgSessionTwo, inviteOrgSessionDBTypes, false, inviteOrgSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteOrgSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = inviteOrgSessionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = inviteOrgSessionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InviteOrgSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func inviteOrgSessionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *InviteOrgSession) error {
	*o = InviteOrgSession{}
	return nil
}

func inviteOrgSessionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *InviteOrgSession) error {
	*o = InviteOrgSession{}
	return nil
}

func inviteOrgSessionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *InviteOrgSession) error {
	*o = InviteOrgSession{}
	return nil
}

func inviteOrgSessionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *InviteOrgSession) error {
	*o = InviteOrgSession{}
	return nil
}

func inviteOrgSessionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *InviteOrgSession) error {
	*o = InviteOrgSession{}
	return nil
}

func inviteOrgSessionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *InviteOrgSession) error {
	*o = InviteOrgSession{}
	return nil
}

func inviteOrgSessionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *InviteOrgSession) error {
	*o = InviteOrgSession{}
	return nil
}

func inviteOrgSessionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *InviteOrgSession) error {
	*o = InviteOrgSession{}
	return nil
}

func inviteOrgSessionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *InviteOrgSession) error {
	*o = InviteOrgSession{}
	return nil
}

func testInviteOrgSessionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &InviteOrgSession{}
	o := &InviteOrgSession{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, inviteOrgSessionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize InviteOrgSession object: %s", err)
	}

	AddInviteOrgSessionHook(boil.BeforeInsertHook, inviteOrgSessionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	inviteOrgSessionBeforeInsertHooks = []InviteOrgSessionHook{}

	AddInviteOrgSessionHook(boil.AfterInsertHook, inviteOrgSessionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	inviteOrgSessionAfterInsertHooks = []InviteOrgSessionHook{}

	AddInviteOrgSessionHook(boil.AfterSelectHook, inviteOrgSessionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	inviteOrgSessionAfterSelectHooks = []InviteOrgSessionHook{}

	AddInviteOrgSessionHook(boil.BeforeUpdateHook, inviteOrgSessionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	inviteOrgSessionBeforeUpdateHooks = []InviteOrgSessionHook{}

	AddInviteOrgSessionHook(boil.AfterUpdateHook, inviteOrgSessionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	inviteOrgSessionAfterUpdateHooks = []InviteOrgSessionHook{}

	AddInviteOrgSessionHook(boil.BeforeDeleteHook, inviteOrgSessionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	inviteOrgSessionBeforeDeleteHooks = []InviteOrgSessionHook{}

	AddInviteOrgSessionHook(boil.AfterDeleteHook, inviteOrgSessionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	inviteOrgSessionAfterDeleteHooks = []InviteOrgSessionHook{}

	AddInviteOrgSessionHook(boil.BeforeUpsertHook, inviteOrgSessionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	inviteOrgSessionBeforeUpsertHooks = []InviteOrgSessionHook{}

	AddInviteOrgSessionHook(boil.AfterUpsertHook, inviteOrgSessionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	inviteOrgSessionAfterUpsertHooks = []InviteOrgSessionHook{}
}

func testInviteOrgSessionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InviteOrgSession{}
	if err = randomize.Struct(seed, o, inviteOrgSessionDBTypes, true, inviteOrgSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteOrgSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InviteOrgSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInviteOrgSessionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InviteOrgSession{}
	if err = randomize.Struct(seed, o, inviteOrgSessionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize InviteOrgSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(inviteOrgSessionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := InviteOrgSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testInviteOrgSessionToOneOrganizationUsingOrg(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local InviteOrgSession
	var foreign Organization

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, inviteOrgSessionDBTypes, false, inviteOrgSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteOrgSession struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, organizationDBTypes, false, organizationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Organization struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.OrgID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Org().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddOrganizationHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Organization) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := InviteOrgSessionSlice{&local}
	if err = local.L.LoadOrg(ctx, tx, false, (*[]*InviteOrgSession)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Org == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Org = nil
	if err = local.L.LoadOrg(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Org == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testInviteOrgSessionToOneSetOpOrganizationUsingOrg(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a InviteOrgSession
	var b, c Organization

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, inviteOrgSessionDBTypes, false, strmangle.SetComplement(inviteOrgSessionPrimaryKeyColumns, inviteOrgSessionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, organizationDBTypes, false, strmangle.SetComplement(organizationPrimaryKeyColumns, organizationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Organization{&b, &c} {
		err = a.SetOrg(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Org != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.OrgInviteOrgSessions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.OrgID != x.ID {
			t.Error("foreign key was wrong value", a.OrgID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.OrgID))
		reflect.Indirect(reflect.ValueOf(&a.OrgID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.OrgID != x.ID {
			t.Error("foreign key was wrong value", a.OrgID, x.ID)
		}
	}
}

func testInviteOrgSessionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InviteOrgSession{}
	if err = randomize.Struct(seed, o, inviteOrgSessionDBTypes, true, inviteOrgSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteOrgSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInviteOrgSessionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InviteOrgSession{}
	if err = randomize.Struct(seed, o, inviteOrgSessionDBTypes, true, inviteOrgSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteOrgSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := InviteOrgSessionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testInviteOrgSessionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &InviteOrgSession{}
	if err = randomize.Struct(seed, o, inviteOrgSessionDBTypes, true, inviteOrgSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteOrgSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := InviteOrgSessions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	inviteOrgSessionDBTypes = map[string]string{`ID`: `int`, `Token`: `varchar`, `Email`: `varchar`, `Period`: `datetime`, `OrgID`: `varchar`, `CreatedAt`: `datetime`, `UpdatedAt`: `datetime`}
	_                       = bytes.MinRead
)

func testInviteOrgSessionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(inviteOrgSessionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(inviteOrgSessionAllColumns) == len(inviteOrgSessionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &InviteOrgSession{}
	if err = randomize.Struct(seed, o, inviteOrgSessionDBTypes, true, inviteOrgSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteOrgSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InviteOrgSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, inviteOrgSessionDBTypes, true, inviteOrgSessionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InviteOrgSession struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testInviteOrgSessionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(inviteOrgSessionAllColumns) == len(inviteOrgSessionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &InviteOrgSession{}
	if err = randomize.Struct(seed, o, inviteOrgSessionDBTypes, true, inviteOrgSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize InviteOrgSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := InviteOrgSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, inviteOrgSessionDBTypes, true, inviteOrgSessionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InviteOrgSession struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(inviteOrgSessionAllColumns, inviteOrgSessionPrimaryKeyColumns) {
		fields = inviteOrgSessionAllColumns
	} else {
		fields = strmangle.SetComplement(
			inviteOrgSessionAllColumns,
			inviteOrgSessionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := InviteOrgSessionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testInviteOrgSessionsUpsert(t *testing.T) {
	t.Parallel()

	if len(inviteOrgSessionAllColumns) == len(inviteOrgSessionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLInviteOrgSessionUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := InviteOrgSession{}
	if err = randomize.Struct(seed, &o, inviteOrgSessionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize InviteOrgSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert InviteOrgSession: %s", err)
	}

	count, err := InviteOrgSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, inviteOrgSessionDBTypes, false, inviteOrgSessionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize InviteOrgSession struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert InviteOrgSession: %s", err)
	}

	count, err = InviteOrgSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
