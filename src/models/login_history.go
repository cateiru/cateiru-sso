// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// LoginHistory is an object representing the database table.
type LoginHistory struct {
	ID        uint        `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID    string      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	RefreshID []byte      `boil:"refresh_id" json:"refresh_id" toml:"refresh_id" yaml:"refresh_id"`
	Device    null.String `boil:"device" json:"device,omitempty" toml:"device" yaml:"device,omitempty"`
	Os        null.String `boil:"os" json:"os,omitempty" toml:"os" yaml:"os,omitempty"`
	Browser   null.String `boil:"browser" json:"browser,omitempty" toml:"browser" yaml:"browser,omitempty"`
	IsMobile  null.Bool   `boil:"is_mobile" json:"is_mobile,omitempty" toml:"is_mobile" yaml:"is_mobile,omitempty"`
	IP        []byte      `boil:"ip" json:"ip" toml:"ip" yaml:"ip"`
	Created   time.Time   `boil:"created" json:"created" toml:"created" yaml:"created"`

	R *loginHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L loginHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var LoginHistoryColumns = struct {
	ID        string
	UserID    string
	RefreshID string
	Device    string
	Os        string
	Browser   string
	IsMobile  string
	IP        string
	Created   string
}{
	ID:        "id",
	UserID:    "user_id",
	RefreshID: "refresh_id",
	Device:    "device",
	Os:        "os",
	Browser:   "browser",
	IsMobile:  "is_mobile",
	IP:        "ip",
	Created:   "created",
}

var LoginHistoryTableColumns = struct {
	ID        string
	UserID    string
	RefreshID string
	Device    string
	Os        string
	Browser   string
	IsMobile  string
	IP        string
	Created   string
}{
	ID:        "login_history.id",
	UserID:    "login_history.user_id",
	RefreshID: "login_history.refresh_id",
	Device:    "login_history.device",
	Os:        "login_history.os",
	Browser:   "login_history.browser",
	IsMobile:  "login_history.is_mobile",
	IP:        "login_history.ip",
	Created:   "login_history.created",
}

// Generated where

var LoginHistoryWhere = struct {
	ID        whereHelperuint
	UserID    whereHelperstring
	RefreshID whereHelper__byte
	Device    whereHelpernull_String
	Os        whereHelpernull_String
	Browser   whereHelpernull_String
	IsMobile  whereHelpernull_Bool
	IP        whereHelper__byte
	Created   whereHelpertime_Time
}{
	ID:        whereHelperuint{field: "`login_history`.`id`"},
	UserID:    whereHelperstring{field: "`login_history`.`user_id`"},
	RefreshID: whereHelper__byte{field: "`login_history`.`refresh_id`"},
	Device:    whereHelpernull_String{field: "`login_history`.`device`"},
	Os:        whereHelpernull_String{field: "`login_history`.`os`"},
	Browser:   whereHelpernull_String{field: "`login_history`.`browser`"},
	IsMobile:  whereHelpernull_Bool{field: "`login_history`.`is_mobile`"},
	IP:        whereHelper__byte{field: "`login_history`.`ip`"},
	Created:   whereHelpertime_Time{field: "`login_history`.`created`"},
}

// LoginHistoryRels is where relationship names are stored.
var LoginHistoryRels = struct {
}{}

// loginHistoryR is where relationships are stored.
type loginHistoryR struct {
}

// NewStruct creates a new relationship struct
func (*loginHistoryR) NewStruct() *loginHistoryR {
	return &loginHistoryR{}
}

// loginHistoryL is where Load methods for each relationship are stored.
type loginHistoryL struct{}

var (
	loginHistoryAllColumns            = []string{"id", "user_id", "refresh_id", "device", "os", "browser", "is_mobile", "ip", "created"}
	loginHistoryColumnsWithoutDefault = []string{"user_id", "refresh_id", "device", "os", "browser", "is_mobile", "ip"}
	loginHistoryColumnsWithDefault    = []string{"id", "created"}
	loginHistoryPrimaryKeyColumns     = []string{"id"}
	loginHistoryGeneratedColumns      = []string{}
)

type (
	// LoginHistorySlice is an alias for a slice of pointers to LoginHistory.
	// This should almost always be used instead of []LoginHistory.
	LoginHistorySlice []*LoginHistory
	// LoginHistoryHook is the signature for custom LoginHistory hook methods
	LoginHistoryHook func(context.Context, boil.ContextExecutor, *LoginHistory) error

	loginHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	loginHistoryType                 = reflect.TypeOf(&LoginHistory{})
	loginHistoryMapping              = queries.MakeStructMapping(loginHistoryType)
	loginHistoryPrimaryKeyMapping, _ = queries.BindMapping(loginHistoryType, loginHistoryMapping, loginHistoryPrimaryKeyColumns)
	loginHistoryInsertCacheMut       sync.RWMutex
	loginHistoryInsertCache          = make(map[string]insertCache)
	loginHistoryUpdateCacheMut       sync.RWMutex
	loginHistoryUpdateCache          = make(map[string]updateCache)
	loginHistoryUpsertCacheMut       sync.RWMutex
	loginHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var loginHistoryAfterSelectHooks []LoginHistoryHook

var loginHistoryBeforeInsertHooks []LoginHistoryHook
var loginHistoryAfterInsertHooks []LoginHistoryHook

var loginHistoryBeforeUpdateHooks []LoginHistoryHook
var loginHistoryAfterUpdateHooks []LoginHistoryHook

var loginHistoryBeforeDeleteHooks []LoginHistoryHook
var loginHistoryAfterDeleteHooks []LoginHistoryHook

var loginHistoryBeforeUpsertHooks []LoginHistoryHook
var loginHistoryAfterUpsertHooks []LoginHistoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *LoginHistory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loginHistoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *LoginHistory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loginHistoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *LoginHistory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loginHistoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *LoginHistory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loginHistoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *LoginHistory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loginHistoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *LoginHistory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loginHistoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *LoginHistory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loginHistoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *LoginHistory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loginHistoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *LoginHistory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range loginHistoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddLoginHistoryHook registers your hook function for all future operations.
func AddLoginHistoryHook(hookPoint boil.HookPoint, loginHistoryHook LoginHistoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		loginHistoryAfterSelectHooks = append(loginHistoryAfterSelectHooks, loginHistoryHook)
	case boil.BeforeInsertHook:
		loginHistoryBeforeInsertHooks = append(loginHistoryBeforeInsertHooks, loginHistoryHook)
	case boil.AfterInsertHook:
		loginHistoryAfterInsertHooks = append(loginHistoryAfterInsertHooks, loginHistoryHook)
	case boil.BeforeUpdateHook:
		loginHistoryBeforeUpdateHooks = append(loginHistoryBeforeUpdateHooks, loginHistoryHook)
	case boil.AfterUpdateHook:
		loginHistoryAfterUpdateHooks = append(loginHistoryAfterUpdateHooks, loginHistoryHook)
	case boil.BeforeDeleteHook:
		loginHistoryBeforeDeleteHooks = append(loginHistoryBeforeDeleteHooks, loginHistoryHook)
	case boil.AfterDeleteHook:
		loginHistoryAfterDeleteHooks = append(loginHistoryAfterDeleteHooks, loginHistoryHook)
	case boil.BeforeUpsertHook:
		loginHistoryBeforeUpsertHooks = append(loginHistoryBeforeUpsertHooks, loginHistoryHook)
	case boil.AfterUpsertHook:
		loginHistoryAfterUpsertHooks = append(loginHistoryAfterUpsertHooks, loginHistoryHook)
	}
}

// One returns a single loginHistory record from the query.
func (q loginHistoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*LoginHistory, error) {
	o := &LoginHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for login_history")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all LoginHistory records from the query.
func (q loginHistoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (LoginHistorySlice, error) {
	var o []*LoginHistory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to LoginHistory slice")
	}

	if len(loginHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all LoginHistory records in the query.
func (q loginHistoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count login_history rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q loginHistoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if login_history exists")
	}

	return count > 0, nil
}

// LoginHistories retrieves all the records using an executor.
func LoginHistories(mods ...qm.QueryMod) loginHistoryQuery {
	mods = append(mods, qm.From("`login_history`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`login_history`.*"})
	}

	return loginHistoryQuery{q}
}

// FindLoginHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindLoginHistory(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*LoginHistory, error) {
	loginHistoryObj := &LoginHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `login_history` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, loginHistoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from login_history")
	}

	if err = loginHistoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return loginHistoryObj, err
	}

	return loginHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *LoginHistory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no login_history provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(loginHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	loginHistoryInsertCacheMut.RLock()
	cache, cached := loginHistoryInsertCache[key]
	loginHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			loginHistoryAllColumns,
			loginHistoryColumnsWithDefault,
			loginHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(loginHistoryType, loginHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(loginHistoryType, loginHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `login_history` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `login_history` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `login_history` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, loginHistoryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into login_history")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == loginHistoryMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for login_history")
	}

CacheNoHooks:
	if !cached {
		loginHistoryInsertCacheMut.Lock()
		loginHistoryInsertCache[key] = cache
		loginHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the LoginHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *LoginHistory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	loginHistoryUpdateCacheMut.RLock()
	cache, cached := loginHistoryUpdateCache[key]
	loginHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			loginHistoryAllColumns,
			loginHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update login_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `login_history` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, loginHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(loginHistoryType, loginHistoryMapping, append(wl, loginHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update login_history row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for login_history")
	}

	if !cached {
		loginHistoryUpdateCacheMut.Lock()
		loginHistoryUpdateCache[key] = cache
		loginHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q loginHistoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for login_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for login_history")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o LoginHistorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), loginHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `login_history` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, loginHistoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in loginHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all loginHistory")
	}
	return rowsAff, nil
}

var mySQLLoginHistoryUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *LoginHistory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no login_history provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(loginHistoryColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLLoginHistoryUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	loginHistoryUpsertCacheMut.RLock()
	cache, cached := loginHistoryUpsertCache[key]
	loginHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			loginHistoryAllColumns,
			loginHistoryColumnsWithDefault,
			loginHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			loginHistoryAllColumns,
			loginHistoryPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert login_history, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`login_history`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `login_history` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(loginHistoryType, loginHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(loginHistoryType, loginHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for login_history")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == loginHistoryMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(loginHistoryType, loginHistoryMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for login_history")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for login_history")
	}

CacheNoHooks:
	if !cached {
		loginHistoryUpsertCacheMut.Lock()
		loginHistoryUpsertCache[key] = cache
		loginHistoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single LoginHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *LoginHistory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no LoginHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), loginHistoryPrimaryKeyMapping)
	sql := "DELETE FROM `login_history` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from login_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for login_history")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q loginHistoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no loginHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from login_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for login_history")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o LoginHistorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(loginHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), loginHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `login_history` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, loginHistoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from loginHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for login_history")
	}

	if len(loginHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *LoginHistory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindLoginHistory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *LoginHistorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := LoginHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), loginHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `login_history`.* FROM `login_history` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, loginHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in LoginHistorySlice")
	}

	*o = slice

	return nil
}

// LoginHistoryExists checks if the LoginHistory row exists.
func LoginHistoryExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `login_history` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if login_history exists")
	}

	return exists, nil
}

// Exists checks if the LoginHistory row exists.
func (o *LoginHistory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return LoginHistoryExists(ctx, exec, o.ID)
}
