// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OauthLoginSession is an object representing the database table.
type OauthLoginSession struct {
	Token        string      `boil:"token" json:"token" toml:"token" yaml:"token"`
	ClientID     string      `boil:"client_id" json:"client_id" toml:"client_id" yaml:"client_id"`
	ReferrerHost null.String `boil:"referrer_host" json:"referrer_host,omitempty" toml:"referrer_host" yaml:"referrer_host,omitempty"`
	Period       time.Time   `boil:"period" json:"period" toml:"period" yaml:"period"`
	CreatedAt    time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt    time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`

	R *oauthLoginSessionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L oauthLoginSessionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OauthLoginSessionColumns = struct {
	Token        string
	ClientID     string
	ReferrerHost string
	Period       string
	CreatedAt    string
	UpdatedAt    string
}{
	Token:        "token",
	ClientID:     "client_id",
	ReferrerHost: "referrer_host",
	Period:       "period",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
}

var OauthLoginSessionTableColumns = struct {
	Token        string
	ClientID     string
	ReferrerHost string
	Period       string
	CreatedAt    string
	UpdatedAt    string
}{
	Token:        "oauth_login_session.token",
	ClientID:     "oauth_login_session.client_id",
	ReferrerHost: "oauth_login_session.referrer_host",
	Period:       "oauth_login_session.period",
	CreatedAt:    "oauth_login_session.created_at",
	UpdatedAt:    "oauth_login_session.updated_at",
}

// Generated where

var OauthLoginSessionWhere = struct {
	Token        whereHelperstring
	ClientID     whereHelperstring
	ReferrerHost whereHelpernull_String
	Period       whereHelpertime_Time
	CreatedAt    whereHelpertime_Time
	UpdatedAt    whereHelpertime_Time
}{
	Token:        whereHelperstring{field: "`oauth_login_session`.`token`"},
	ClientID:     whereHelperstring{field: "`oauth_login_session`.`client_id`"},
	ReferrerHost: whereHelpernull_String{field: "`oauth_login_session`.`referrer_host`"},
	Period:       whereHelpertime_Time{field: "`oauth_login_session`.`period`"},
	CreatedAt:    whereHelpertime_Time{field: "`oauth_login_session`.`created_at`"},
	UpdatedAt:    whereHelpertime_Time{field: "`oauth_login_session`.`updated_at`"},
}

// OauthLoginSessionRels is where relationship names are stored.
var OauthLoginSessionRels = struct {
	Client string
}{
	Client: "Client",
}

// oauthLoginSessionR is where relationships are stored.
type oauthLoginSessionR struct {
	Client *Client `boil:"Client" json:"Client" toml:"Client" yaml:"Client"`
}

// NewStruct creates a new relationship struct
func (*oauthLoginSessionR) NewStruct() *oauthLoginSessionR {
	return &oauthLoginSessionR{}
}

func (r *oauthLoginSessionR) GetClient() *Client {
	if r == nil {
		return nil
	}
	return r.Client
}

// oauthLoginSessionL is where Load methods for each relationship are stored.
type oauthLoginSessionL struct{}

var (
	oauthLoginSessionAllColumns            = []string{"token", "client_id", "referrer_host", "period", "created_at", "updated_at"}
	oauthLoginSessionColumnsWithoutDefault = []string{"token", "client_id", "referrer_host"}
	oauthLoginSessionColumnsWithDefault    = []string{"period", "created_at", "updated_at"}
	oauthLoginSessionPrimaryKeyColumns     = []string{"token"}
	oauthLoginSessionGeneratedColumns      = []string{}
)

type (
	// OauthLoginSessionSlice is an alias for a slice of pointers to OauthLoginSession.
	// This should almost always be used instead of []OauthLoginSession.
	OauthLoginSessionSlice []*OauthLoginSession
	// OauthLoginSessionHook is the signature for custom OauthLoginSession hook methods
	OauthLoginSessionHook func(context.Context, boil.ContextExecutor, *OauthLoginSession) error

	oauthLoginSessionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	oauthLoginSessionType                 = reflect.TypeOf(&OauthLoginSession{})
	oauthLoginSessionMapping              = queries.MakeStructMapping(oauthLoginSessionType)
	oauthLoginSessionPrimaryKeyMapping, _ = queries.BindMapping(oauthLoginSessionType, oauthLoginSessionMapping, oauthLoginSessionPrimaryKeyColumns)
	oauthLoginSessionInsertCacheMut       sync.RWMutex
	oauthLoginSessionInsertCache          = make(map[string]insertCache)
	oauthLoginSessionUpdateCacheMut       sync.RWMutex
	oauthLoginSessionUpdateCache          = make(map[string]updateCache)
	oauthLoginSessionUpsertCacheMut       sync.RWMutex
	oauthLoginSessionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var oauthLoginSessionAfterSelectHooks []OauthLoginSessionHook

var oauthLoginSessionBeforeInsertHooks []OauthLoginSessionHook
var oauthLoginSessionAfterInsertHooks []OauthLoginSessionHook

var oauthLoginSessionBeforeUpdateHooks []OauthLoginSessionHook
var oauthLoginSessionAfterUpdateHooks []OauthLoginSessionHook

var oauthLoginSessionBeforeDeleteHooks []OauthLoginSessionHook
var oauthLoginSessionAfterDeleteHooks []OauthLoginSessionHook

var oauthLoginSessionBeforeUpsertHooks []OauthLoginSessionHook
var oauthLoginSessionAfterUpsertHooks []OauthLoginSessionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OauthLoginSession) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthLoginSessionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OauthLoginSession) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthLoginSessionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OauthLoginSession) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthLoginSessionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OauthLoginSession) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthLoginSessionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OauthLoginSession) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthLoginSessionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OauthLoginSession) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthLoginSessionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OauthLoginSession) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthLoginSessionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OauthLoginSession) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthLoginSessionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OauthLoginSession) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range oauthLoginSessionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOauthLoginSessionHook registers your hook function for all future operations.
func AddOauthLoginSessionHook(hookPoint boil.HookPoint, oauthLoginSessionHook OauthLoginSessionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		oauthLoginSessionAfterSelectHooks = append(oauthLoginSessionAfterSelectHooks, oauthLoginSessionHook)
	case boil.BeforeInsertHook:
		oauthLoginSessionBeforeInsertHooks = append(oauthLoginSessionBeforeInsertHooks, oauthLoginSessionHook)
	case boil.AfterInsertHook:
		oauthLoginSessionAfterInsertHooks = append(oauthLoginSessionAfterInsertHooks, oauthLoginSessionHook)
	case boil.BeforeUpdateHook:
		oauthLoginSessionBeforeUpdateHooks = append(oauthLoginSessionBeforeUpdateHooks, oauthLoginSessionHook)
	case boil.AfterUpdateHook:
		oauthLoginSessionAfterUpdateHooks = append(oauthLoginSessionAfterUpdateHooks, oauthLoginSessionHook)
	case boil.BeforeDeleteHook:
		oauthLoginSessionBeforeDeleteHooks = append(oauthLoginSessionBeforeDeleteHooks, oauthLoginSessionHook)
	case boil.AfterDeleteHook:
		oauthLoginSessionAfterDeleteHooks = append(oauthLoginSessionAfterDeleteHooks, oauthLoginSessionHook)
	case boil.BeforeUpsertHook:
		oauthLoginSessionBeforeUpsertHooks = append(oauthLoginSessionBeforeUpsertHooks, oauthLoginSessionHook)
	case boil.AfterUpsertHook:
		oauthLoginSessionAfterUpsertHooks = append(oauthLoginSessionAfterUpsertHooks, oauthLoginSessionHook)
	}
}

// One returns a single oauthLoginSession record from the query.
func (q oauthLoginSessionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OauthLoginSession, error) {
	o := &OauthLoginSession{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for oauth_login_session")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OauthLoginSession records from the query.
func (q oauthLoginSessionQuery) All(ctx context.Context, exec boil.ContextExecutor) (OauthLoginSessionSlice, error) {
	var o []*OauthLoginSession

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OauthLoginSession slice")
	}

	if len(oauthLoginSessionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OauthLoginSession records in the query.
func (q oauthLoginSessionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count oauth_login_session rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q oauthLoginSessionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if oauth_login_session exists")
	}

	return count > 0, nil
}

// Client pointed to by the foreign key.
func (o *OauthLoginSession) Client(mods ...qm.QueryMod) clientQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`client_id` = ?", o.ClientID),
	}

	queryMods = append(queryMods, mods...)

	return Clients(queryMods...)
}

// LoadClient allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (oauthLoginSessionL) LoadClient(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOauthLoginSession interface{}, mods queries.Applicator) error {
	var slice []*OauthLoginSession
	var object *OauthLoginSession

	if singular {
		var ok bool
		object, ok = maybeOauthLoginSession.(*OauthLoginSession)
		if !ok {
			object = new(OauthLoginSession)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOauthLoginSession)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOauthLoginSession))
			}
		}
	} else {
		s, ok := maybeOauthLoginSession.(*[]*OauthLoginSession)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOauthLoginSession)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOauthLoginSession))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &oauthLoginSessionR{}
		}
		args = append(args, object.ClientID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &oauthLoginSessionR{}
			}

			for _, a := range args {
				if a == obj.ClientID {
					continue Outer
				}
			}

			args = append(args, obj.ClientID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`client`),
		qm.WhereIn(`client.client_id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Client")
	}

	var resultSlice []*Client
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Client")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for client")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for client")
	}

	if len(clientAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Client = foreign
		if foreign.R == nil {
			foreign.R = &clientR{}
		}
		foreign.R.OauthLoginSessions = append(foreign.R.OauthLoginSessions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ClientID == foreign.ClientID {
				local.R.Client = foreign
				if foreign.R == nil {
					foreign.R = &clientR{}
				}
				foreign.R.OauthLoginSessions = append(foreign.R.OauthLoginSessions, local)
				break
			}
		}
	}

	return nil
}

// SetClient of the oauthLoginSession to the related item.
// Sets o.R.Client to related.
// Adds o to related.R.OauthLoginSessions.
func (o *OauthLoginSession) SetClient(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Client) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `oauth_login_session` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"client_id"}),
		strmangle.WhereClause("`", "`", 0, oauthLoginSessionPrimaryKeyColumns),
	)
	values := []interface{}{related.ClientID, o.Token}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ClientID = related.ClientID
	if o.R == nil {
		o.R = &oauthLoginSessionR{
			Client: related,
		}
	} else {
		o.R.Client = related
	}

	if related.R == nil {
		related.R = &clientR{
			OauthLoginSessions: OauthLoginSessionSlice{o},
		}
	} else {
		related.R.OauthLoginSessions = append(related.R.OauthLoginSessions, o)
	}

	return nil
}

// OauthLoginSessions retrieves all the records using an executor.
func OauthLoginSessions(mods ...qm.QueryMod) oauthLoginSessionQuery {
	mods = append(mods, qm.From("`oauth_login_session`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`oauth_login_session`.*"})
	}

	return oauthLoginSessionQuery{q}
}

// FindOauthLoginSession retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOauthLoginSession(ctx context.Context, exec boil.ContextExecutor, token string, selectCols ...string) (*OauthLoginSession, error) {
	oauthLoginSessionObj := &OauthLoginSession{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `oauth_login_session` where `token`=?", sel,
	)

	q := queries.Raw(query, token)

	err := q.Bind(ctx, exec, oauthLoginSessionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from oauth_login_session")
	}

	if err = oauthLoginSessionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return oauthLoginSessionObj, err
	}

	return oauthLoginSessionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OauthLoginSession) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no oauth_login_session provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(oauthLoginSessionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	oauthLoginSessionInsertCacheMut.RLock()
	cache, cached := oauthLoginSessionInsertCache[key]
	oauthLoginSessionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			oauthLoginSessionAllColumns,
			oauthLoginSessionColumnsWithDefault,
			oauthLoginSessionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(oauthLoginSessionType, oauthLoginSessionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(oauthLoginSessionType, oauthLoginSessionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `oauth_login_session` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `oauth_login_session` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `oauth_login_session` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, oauthLoginSessionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into oauth_login_session")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.Token,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for oauth_login_session")
	}

CacheNoHooks:
	if !cached {
		oauthLoginSessionInsertCacheMut.Lock()
		oauthLoginSessionInsertCache[key] = cache
		oauthLoginSessionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OauthLoginSession.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OauthLoginSession) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	oauthLoginSessionUpdateCacheMut.RLock()
	cache, cached := oauthLoginSessionUpdateCache[key]
	oauthLoginSessionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			oauthLoginSessionAllColumns,
			oauthLoginSessionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update oauth_login_session, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `oauth_login_session` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, oauthLoginSessionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(oauthLoginSessionType, oauthLoginSessionMapping, append(wl, oauthLoginSessionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update oauth_login_session row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for oauth_login_session")
	}

	if !cached {
		oauthLoginSessionUpdateCacheMut.Lock()
		oauthLoginSessionUpdateCache[key] = cache
		oauthLoginSessionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q oauthLoginSessionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for oauth_login_session")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for oauth_login_session")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OauthLoginSessionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), oauthLoginSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `oauth_login_session` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, oauthLoginSessionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in oauthLoginSession slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all oauthLoginSession")
	}
	return rowsAff, nil
}

var mySQLOauthLoginSessionUniqueColumns = []string{
	"token",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OauthLoginSession) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no oauth_login_session provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(oauthLoginSessionColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLOauthLoginSessionUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	oauthLoginSessionUpsertCacheMut.RLock()
	cache, cached := oauthLoginSessionUpsertCache[key]
	oauthLoginSessionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			oauthLoginSessionAllColumns,
			oauthLoginSessionColumnsWithDefault,
			oauthLoginSessionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			oauthLoginSessionAllColumns,
			oauthLoginSessionPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert oauth_login_session, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`oauth_login_session`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `oauth_login_session` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(oauthLoginSessionType, oauthLoginSessionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(oauthLoginSessionType, oauthLoginSessionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for oauth_login_session")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(oauthLoginSessionType, oauthLoginSessionMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for oauth_login_session")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for oauth_login_session")
	}

CacheNoHooks:
	if !cached {
		oauthLoginSessionUpsertCacheMut.Lock()
		oauthLoginSessionUpsertCache[key] = cache
		oauthLoginSessionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OauthLoginSession record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OauthLoginSession) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OauthLoginSession provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), oauthLoginSessionPrimaryKeyMapping)
	sql := "DELETE FROM `oauth_login_session` WHERE `token`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from oauth_login_session")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for oauth_login_session")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q oauthLoginSessionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no oauthLoginSessionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from oauth_login_session")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for oauth_login_session")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OauthLoginSessionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(oauthLoginSessionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), oauthLoginSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `oauth_login_session` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, oauthLoginSessionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from oauthLoginSession slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for oauth_login_session")
	}

	if len(oauthLoginSessionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OauthLoginSession) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOauthLoginSession(ctx, exec, o.Token)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OauthLoginSessionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OauthLoginSessionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), oauthLoginSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `oauth_login_session`.* FROM `oauth_login_session` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, oauthLoginSessionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OauthLoginSessionSlice")
	}

	*o = slice

	return nil
}

// OauthLoginSessionExists checks if the OauthLoginSession row exists.
func OauthLoginSessionExists(ctx context.Context, exec boil.ContextExecutor, token string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `oauth_login_session` where `token`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, token)
	}
	row := exec.QueryRowContext(ctx, sql, token)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if oauth_login_session exists")
	}

	return exists, nil
}

// Exists checks if the OauthLoginSession row exists.
func (o *OauthLoginSession) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OauthLoginSessionExists(ctx, exec, o.Token)
}
