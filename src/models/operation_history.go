// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OperationHistory is an object representing the database table.
type OperationHistory struct {
	ID         uint        `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID     string      `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Device     null.String `boil:"device" json:"device,omitempty" toml:"device" yaml:"device,omitempty"`
	Os         null.String `boil:"os" json:"os,omitempty" toml:"os" yaml:"os,omitempty"`
	Browser    null.String `boil:"browser" json:"browser,omitempty" toml:"browser" yaml:"browser,omitempty"`
	IsMobile   null.Bool   `boil:"is_mobile" json:"is_mobile,omitempty" toml:"is_mobile" yaml:"is_mobile,omitempty"`
	IP         []byte      `boil:"ip" json:"ip" toml:"ip" yaml:"ip"`
	Identifier int8        `boil:"identifier" json:"identifier" toml:"identifier" yaml:"identifier"`
	CreatedAt  time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *operationHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L operationHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OperationHistoryColumns = struct {
	ID         string
	UserID     string
	Device     string
	Os         string
	Browser    string
	IsMobile   string
	IP         string
	Identifier string
	CreatedAt  string
}{
	ID:         "id",
	UserID:     "user_id",
	Device:     "device",
	Os:         "os",
	Browser:    "browser",
	IsMobile:   "is_mobile",
	IP:         "ip",
	Identifier: "identifier",
	CreatedAt:  "created_at",
}

var OperationHistoryTableColumns = struct {
	ID         string
	UserID     string
	Device     string
	Os         string
	Browser    string
	IsMobile   string
	IP         string
	Identifier string
	CreatedAt  string
}{
	ID:         "operation_history.id",
	UserID:     "operation_history.user_id",
	Device:     "operation_history.device",
	Os:         "operation_history.os",
	Browser:    "operation_history.browser",
	IsMobile:   "operation_history.is_mobile",
	IP:         "operation_history.ip",
	Identifier: "operation_history.identifier",
	CreatedAt:  "operation_history.created_at",
}

// Generated where

var OperationHistoryWhere = struct {
	ID         whereHelperuint
	UserID     whereHelperstring
	Device     whereHelpernull_String
	Os         whereHelpernull_String
	Browser    whereHelpernull_String
	IsMobile   whereHelpernull_Bool
	IP         whereHelper__byte
	Identifier whereHelperint8
	CreatedAt  whereHelpertime_Time
}{
	ID:         whereHelperuint{field: "`operation_history`.`id`"},
	UserID:     whereHelperstring{field: "`operation_history`.`user_id`"},
	Device:     whereHelpernull_String{field: "`operation_history`.`device`"},
	Os:         whereHelpernull_String{field: "`operation_history`.`os`"},
	Browser:    whereHelpernull_String{field: "`operation_history`.`browser`"},
	IsMobile:   whereHelpernull_Bool{field: "`operation_history`.`is_mobile`"},
	IP:         whereHelper__byte{field: "`operation_history`.`ip`"},
	Identifier: whereHelperint8{field: "`operation_history`.`identifier`"},
	CreatedAt:  whereHelpertime_Time{field: "`operation_history`.`created_at`"},
}

// OperationHistoryRels is where relationship names are stored.
var OperationHistoryRels = struct {
	User string
}{
	User: "User",
}

// operationHistoryR is where relationships are stored.
type operationHistoryR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*operationHistoryR) NewStruct() *operationHistoryR {
	return &operationHistoryR{}
}

func (r *operationHistoryR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// operationHistoryL is where Load methods for each relationship are stored.
type operationHistoryL struct{}

var (
	operationHistoryAllColumns            = []string{"id", "user_id", "device", "os", "browser", "is_mobile", "ip", "identifier", "created_at"}
	operationHistoryColumnsWithoutDefault = []string{"user_id", "device", "os", "browser", "is_mobile", "ip"}
	operationHistoryColumnsWithDefault    = []string{"id", "identifier", "created_at"}
	operationHistoryPrimaryKeyColumns     = []string{"id"}
	operationHistoryGeneratedColumns      = []string{}
)

type (
	// OperationHistorySlice is an alias for a slice of pointers to OperationHistory.
	// This should almost always be used instead of []OperationHistory.
	OperationHistorySlice []*OperationHistory
	// OperationHistoryHook is the signature for custom OperationHistory hook methods
	OperationHistoryHook func(context.Context, boil.ContextExecutor, *OperationHistory) error

	operationHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	operationHistoryType                 = reflect.TypeOf(&OperationHistory{})
	operationHistoryMapping              = queries.MakeStructMapping(operationHistoryType)
	operationHistoryPrimaryKeyMapping, _ = queries.BindMapping(operationHistoryType, operationHistoryMapping, operationHistoryPrimaryKeyColumns)
	operationHistoryInsertCacheMut       sync.RWMutex
	operationHistoryInsertCache          = make(map[string]insertCache)
	operationHistoryUpdateCacheMut       sync.RWMutex
	operationHistoryUpdateCache          = make(map[string]updateCache)
	operationHistoryUpsertCacheMut       sync.RWMutex
	operationHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var operationHistoryAfterSelectHooks []OperationHistoryHook

var operationHistoryBeforeInsertHooks []OperationHistoryHook
var operationHistoryAfterInsertHooks []OperationHistoryHook

var operationHistoryBeforeUpdateHooks []OperationHistoryHook
var operationHistoryAfterUpdateHooks []OperationHistoryHook

var operationHistoryBeforeDeleteHooks []OperationHistoryHook
var operationHistoryAfterDeleteHooks []OperationHistoryHook

var operationHistoryBeforeUpsertHooks []OperationHistoryHook
var operationHistoryAfterUpsertHooks []OperationHistoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OperationHistory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operationHistoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OperationHistory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operationHistoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OperationHistory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operationHistoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OperationHistory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operationHistoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OperationHistory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operationHistoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OperationHistory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operationHistoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OperationHistory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operationHistoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OperationHistory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operationHistoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OperationHistory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range operationHistoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOperationHistoryHook registers your hook function for all future operations.
func AddOperationHistoryHook(hookPoint boil.HookPoint, operationHistoryHook OperationHistoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		operationHistoryAfterSelectHooks = append(operationHistoryAfterSelectHooks, operationHistoryHook)
	case boil.BeforeInsertHook:
		operationHistoryBeforeInsertHooks = append(operationHistoryBeforeInsertHooks, operationHistoryHook)
	case boil.AfterInsertHook:
		operationHistoryAfterInsertHooks = append(operationHistoryAfterInsertHooks, operationHistoryHook)
	case boil.BeforeUpdateHook:
		operationHistoryBeforeUpdateHooks = append(operationHistoryBeforeUpdateHooks, operationHistoryHook)
	case boil.AfterUpdateHook:
		operationHistoryAfterUpdateHooks = append(operationHistoryAfterUpdateHooks, operationHistoryHook)
	case boil.BeforeDeleteHook:
		operationHistoryBeforeDeleteHooks = append(operationHistoryBeforeDeleteHooks, operationHistoryHook)
	case boil.AfterDeleteHook:
		operationHistoryAfterDeleteHooks = append(operationHistoryAfterDeleteHooks, operationHistoryHook)
	case boil.BeforeUpsertHook:
		operationHistoryBeforeUpsertHooks = append(operationHistoryBeforeUpsertHooks, operationHistoryHook)
	case boil.AfterUpsertHook:
		operationHistoryAfterUpsertHooks = append(operationHistoryAfterUpsertHooks, operationHistoryHook)
	}
}

// One returns a single operationHistory record from the query.
func (q operationHistoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OperationHistory, error) {
	o := &OperationHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for operation_history")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OperationHistory records from the query.
func (q operationHistoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (OperationHistorySlice, error) {
	var o []*OperationHistory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OperationHistory slice")
	}

	if len(operationHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OperationHistory records in the query.
func (q operationHistoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count operation_history rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q operationHistoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if operation_history exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *OperationHistory) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (operationHistoryL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeOperationHistory interface{}, mods queries.Applicator) error {
	var slice []*OperationHistory
	var object *OperationHistory

	if singular {
		var ok bool
		object, ok = maybeOperationHistory.(*OperationHistory)
		if !ok {
			object = new(OperationHistory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeOperationHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeOperationHistory))
			}
		}
	} else {
		s, ok := maybeOperationHistory.(*[]*OperationHistory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeOperationHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeOperationHistory))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &operationHistoryR{}
		}
		args = append(args, object.UserID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &operationHistoryR{}
			}

			for _, a := range args {
				if a == obj.UserID {
					continue Outer
				}
			}

			args = append(args, obj.UserID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.OperationHistories = append(foreign.R.OperationHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.OperationHistories = append(foreign.R.OperationHistories, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the operationHistory to the related item.
// Sets o.R.User to related.
// Adds o to related.R.OperationHistories.
func (o *OperationHistory) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `operation_history` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"user_id"}),
		strmangle.WhereClause("`", "`", 0, operationHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &operationHistoryR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			OperationHistories: OperationHistorySlice{o},
		}
	} else {
		related.R.OperationHistories = append(related.R.OperationHistories, o)
	}

	return nil
}

// OperationHistories retrieves all the records using an executor.
func OperationHistories(mods ...qm.QueryMod) operationHistoryQuery {
	mods = append(mods, qm.From("`operation_history`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`operation_history`.*"})
	}

	return operationHistoryQuery{q}
}

// FindOperationHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOperationHistory(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*OperationHistory, error) {
	operationHistoryObj := &OperationHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `operation_history` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, operationHistoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from operation_history")
	}

	if err = operationHistoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return operationHistoryObj, err
	}

	return operationHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OperationHistory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no operation_history provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(operationHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	operationHistoryInsertCacheMut.RLock()
	cache, cached := operationHistoryInsertCache[key]
	operationHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			operationHistoryAllColumns,
			operationHistoryColumnsWithDefault,
			operationHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(operationHistoryType, operationHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(operationHistoryType, operationHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `operation_history` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `operation_history` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `operation_history` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, operationHistoryPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into operation_history")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == operationHistoryMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for operation_history")
	}

CacheNoHooks:
	if !cached {
		operationHistoryInsertCacheMut.Lock()
		operationHistoryInsertCache[key] = cache
		operationHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OperationHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OperationHistory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	operationHistoryUpdateCacheMut.RLock()
	cache, cached := operationHistoryUpdateCache[key]
	operationHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			operationHistoryAllColumns,
			operationHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update operation_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `operation_history` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, operationHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(operationHistoryType, operationHistoryMapping, append(wl, operationHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update operation_history row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for operation_history")
	}

	if !cached {
		operationHistoryUpdateCacheMut.Lock()
		operationHistoryUpdateCache[key] = cache
		operationHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q operationHistoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for operation_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for operation_history")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OperationHistorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), operationHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `operation_history` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, operationHistoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in operationHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all operationHistory")
	}
	return rowsAff, nil
}

var mySQLOperationHistoryUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OperationHistory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no operation_history provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(operationHistoryColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLOperationHistoryUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	operationHistoryUpsertCacheMut.RLock()
	cache, cached := operationHistoryUpsertCache[key]
	operationHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			operationHistoryAllColumns,
			operationHistoryColumnsWithDefault,
			operationHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			operationHistoryAllColumns,
			operationHistoryPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert operation_history, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`operation_history`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `operation_history` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(operationHistoryType, operationHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(operationHistoryType, operationHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for operation_history")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == operationHistoryMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(operationHistoryType, operationHistoryMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for operation_history")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for operation_history")
	}

CacheNoHooks:
	if !cached {
		operationHistoryUpsertCacheMut.Lock()
		operationHistoryUpsertCache[key] = cache
		operationHistoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OperationHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OperationHistory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OperationHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), operationHistoryPrimaryKeyMapping)
	sql := "DELETE FROM `operation_history` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from operation_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for operation_history")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q operationHistoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no operationHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from operation_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for operation_history")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OperationHistorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(operationHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), operationHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `operation_history` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, operationHistoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from operationHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for operation_history")
	}

	if len(operationHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OperationHistory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOperationHistory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OperationHistorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OperationHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), operationHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `operation_history`.* FROM `operation_history` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, operationHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OperationHistorySlice")
	}

	*o = slice

	return nil
}

// OperationHistoryExists checks if the OperationHistory row exists.
func OperationHistoryExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `operation_history` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if operation_history exists")
	}

	return exists, nil
}

// Exists checks if the OperationHistory row exists.
func (o *OperationHistory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OperationHistoryExists(ctx, exec, o.ID)
}
