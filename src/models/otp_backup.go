// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// OtpBackup is an object representing the database table.
type OtpBackup struct {
	ID      uint      `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID  string    `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Code    string    `boil:"code" json:"code" toml:"code" yaml:"code"`
	Created time.Time `boil:"created" json:"created" toml:"created" yaml:"created"`

	R *otpBackupR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L otpBackupL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var OtpBackupColumns = struct {
	ID      string
	UserID  string
	Code    string
	Created string
}{
	ID:      "id",
	UserID:  "user_id",
	Code:    "code",
	Created: "created",
}

var OtpBackupTableColumns = struct {
	ID      string
	UserID  string
	Code    string
	Created string
}{
	ID:      "otp_backup.id",
	UserID:  "otp_backup.user_id",
	Code:    "otp_backup.code",
	Created: "otp_backup.created",
}

// Generated where

var OtpBackupWhere = struct {
	ID      whereHelperuint
	UserID  whereHelperstring
	Code    whereHelperstring
	Created whereHelpertime_Time
}{
	ID:      whereHelperuint{field: "`otp_backup`.`id`"},
	UserID:  whereHelperstring{field: "`otp_backup`.`user_id`"},
	Code:    whereHelperstring{field: "`otp_backup`.`code`"},
	Created: whereHelpertime_Time{field: "`otp_backup`.`created`"},
}

// OtpBackupRels is where relationship names are stored.
var OtpBackupRels = struct {
}{}

// otpBackupR is where relationships are stored.
type otpBackupR struct {
}

// NewStruct creates a new relationship struct
func (*otpBackupR) NewStruct() *otpBackupR {
	return &otpBackupR{}
}

// otpBackupL is where Load methods for each relationship are stored.
type otpBackupL struct{}

var (
	otpBackupAllColumns            = []string{"id", "user_id", "code", "created"}
	otpBackupColumnsWithoutDefault = []string{"user_id", "code"}
	otpBackupColumnsWithDefault    = []string{"id", "created"}
	otpBackupPrimaryKeyColumns     = []string{"id"}
	otpBackupGeneratedColumns      = []string{}
)

type (
	// OtpBackupSlice is an alias for a slice of pointers to OtpBackup.
	// This should almost always be used instead of []OtpBackup.
	OtpBackupSlice []*OtpBackup
	// OtpBackupHook is the signature for custom OtpBackup hook methods
	OtpBackupHook func(context.Context, boil.ContextExecutor, *OtpBackup) error

	otpBackupQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	otpBackupType                 = reflect.TypeOf(&OtpBackup{})
	otpBackupMapping              = queries.MakeStructMapping(otpBackupType)
	otpBackupPrimaryKeyMapping, _ = queries.BindMapping(otpBackupType, otpBackupMapping, otpBackupPrimaryKeyColumns)
	otpBackupInsertCacheMut       sync.RWMutex
	otpBackupInsertCache          = make(map[string]insertCache)
	otpBackupUpdateCacheMut       sync.RWMutex
	otpBackupUpdateCache          = make(map[string]updateCache)
	otpBackupUpsertCacheMut       sync.RWMutex
	otpBackupUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var otpBackupAfterSelectHooks []OtpBackupHook

var otpBackupBeforeInsertHooks []OtpBackupHook
var otpBackupAfterInsertHooks []OtpBackupHook

var otpBackupBeforeUpdateHooks []OtpBackupHook
var otpBackupAfterUpdateHooks []OtpBackupHook

var otpBackupBeforeDeleteHooks []OtpBackupHook
var otpBackupAfterDeleteHooks []OtpBackupHook

var otpBackupBeforeUpsertHooks []OtpBackupHook
var otpBackupAfterUpsertHooks []OtpBackupHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *OtpBackup) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range otpBackupAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *OtpBackup) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range otpBackupBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *OtpBackup) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range otpBackupAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *OtpBackup) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range otpBackupBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *OtpBackup) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range otpBackupAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *OtpBackup) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range otpBackupBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *OtpBackup) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range otpBackupAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *OtpBackup) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range otpBackupBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *OtpBackup) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range otpBackupAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddOtpBackupHook registers your hook function for all future operations.
func AddOtpBackupHook(hookPoint boil.HookPoint, otpBackupHook OtpBackupHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		otpBackupAfterSelectHooks = append(otpBackupAfterSelectHooks, otpBackupHook)
	case boil.BeforeInsertHook:
		otpBackupBeforeInsertHooks = append(otpBackupBeforeInsertHooks, otpBackupHook)
	case boil.AfterInsertHook:
		otpBackupAfterInsertHooks = append(otpBackupAfterInsertHooks, otpBackupHook)
	case boil.BeforeUpdateHook:
		otpBackupBeforeUpdateHooks = append(otpBackupBeforeUpdateHooks, otpBackupHook)
	case boil.AfterUpdateHook:
		otpBackupAfterUpdateHooks = append(otpBackupAfterUpdateHooks, otpBackupHook)
	case boil.BeforeDeleteHook:
		otpBackupBeforeDeleteHooks = append(otpBackupBeforeDeleteHooks, otpBackupHook)
	case boil.AfterDeleteHook:
		otpBackupAfterDeleteHooks = append(otpBackupAfterDeleteHooks, otpBackupHook)
	case boil.BeforeUpsertHook:
		otpBackupBeforeUpsertHooks = append(otpBackupBeforeUpsertHooks, otpBackupHook)
	case boil.AfterUpsertHook:
		otpBackupAfterUpsertHooks = append(otpBackupAfterUpsertHooks, otpBackupHook)
	}
}

// One returns a single otpBackup record from the query.
func (q otpBackupQuery) One(ctx context.Context, exec boil.ContextExecutor) (*OtpBackup, error) {
	o := &OtpBackup{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for otp_backup")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all OtpBackup records from the query.
func (q otpBackupQuery) All(ctx context.Context, exec boil.ContextExecutor) (OtpBackupSlice, error) {
	var o []*OtpBackup

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to OtpBackup slice")
	}

	if len(otpBackupAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all OtpBackup records in the query.
func (q otpBackupQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count otp_backup rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q otpBackupQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if otp_backup exists")
	}

	return count > 0, nil
}

// OtpBackups retrieves all the records using an executor.
func OtpBackups(mods ...qm.QueryMod) otpBackupQuery {
	mods = append(mods, qm.From("`otp_backup`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`otp_backup`.*"})
	}

	return otpBackupQuery{q}
}

// FindOtpBackup retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindOtpBackup(ctx context.Context, exec boil.ContextExecutor, iD uint, selectCols ...string) (*OtpBackup, error) {
	otpBackupObj := &OtpBackup{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `otp_backup` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, otpBackupObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from otp_backup")
	}

	if err = otpBackupObj.doAfterSelectHooks(ctx, exec); err != nil {
		return otpBackupObj, err
	}

	return otpBackupObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *OtpBackup) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no otp_backup provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(otpBackupColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	otpBackupInsertCacheMut.RLock()
	cache, cached := otpBackupInsertCache[key]
	otpBackupInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			otpBackupAllColumns,
			otpBackupColumnsWithDefault,
			otpBackupColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(otpBackupType, otpBackupMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(otpBackupType, otpBackupMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `otp_backup` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `otp_backup` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `otp_backup` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, otpBackupPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into otp_backup")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == otpBackupMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for otp_backup")
	}

CacheNoHooks:
	if !cached {
		otpBackupInsertCacheMut.Lock()
		otpBackupInsertCache[key] = cache
		otpBackupInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the OtpBackup.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *OtpBackup) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	otpBackupUpdateCacheMut.RLock()
	cache, cached := otpBackupUpdateCache[key]
	otpBackupUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			otpBackupAllColumns,
			otpBackupPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update otp_backup, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `otp_backup` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, otpBackupPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(otpBackupType, otpBackupMapping, append(wl, otpBackupPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update otp_backup row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for otp_backup")
	}

	if !cached {
		otpBackupUpdateCacheMut.Lock()
		otpBackupUpdateCache[key] = cache
		otpBackupUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q otpBackupQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for otp_backup")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for otp_backup")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o OtpBackupSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), otpBackupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `otp_backup` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, otpBackupPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in otpBackup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all otpBackup")
	}
	return rowsAff, nil
}

var mySQLOtpBackupUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *OtpBackup) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no otp_backup provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(otpBackupColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLOtpBackupUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	otpBackupUpsertCacheMut.RLock()
	cache, cached := otpBackupUpsertCache[key]
	otpBackupUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			otpBackupAllColumns,
			otpBackupColumnsWithDefault,
			otpBackupColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			otpBackupAllColumns,
			otpBackupPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert otp_backup, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`otp_backup`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `otp_backup` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(otpBackupType, otpBackupMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(otpBackupType, otpBackupMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for otp_backup")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = uint(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == otpBackupMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(otpBackupType, otpBackupMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for otp_backup")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for otp_backup")
	}

CacheNoHooks:
	if !cached {
		otpBackupUpsertCacheMut.Lock()
		otpBackupUpsertCache[key] = cache
		otpBackupUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single OtpBackup record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *OtpBackup) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no OtpBackup provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), otpBackupPrimaryKeyMapping)
	sql := "DELETE FROM `otp_backup` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from otp_backup")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for otp_backup")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q otpBackupQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no otpBackupQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from otp_backup")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for otp_backup")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o OtpBackupSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(otpBackupBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), otpBackupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `otp_backup` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, otpBackupPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from otpBackup slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for otp_backup")
	}

	if len(otpBackupAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *OtpBackup) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindOtpBackup(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *OtpBackupSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := OtpBackupSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), otpBackupPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `otp_backup`.* FROM `otp_backup` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, otpBackupPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in OtpBackupSlice")
	}

	*o = slice

	return nil
}

// OtpBackupExists checks if the OtpBackup row exists.
func OtpBackupExists(ctx context.Context, exec boil.ContextExecutor, iD uint) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `otp_backup` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if otp_backup exists")
	}

	return exists, nil
}

// Exists checks if the OtpBackup row exists.
func (o *OtpBackup) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return OtpBackupExists(ctx, exec, o.ID)
}
