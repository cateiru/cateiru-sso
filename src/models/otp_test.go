// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testOtps(t *testing.T) {
	t.Parallel()

	query := Otps()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testOtpsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Otp{}
	if err = randomize.Struct(seed, o, otpDBTypes, true, otpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Otp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Otps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOtpsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Otp{}
	if err = randomize.Struct(seed, o, otpDBTypes, true, otpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Otp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Otps().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Otps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOtpsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Otp{}
	if err = randomize.Struct(seed, o, otpDBTypes, true, otpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Otp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OtpSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Otps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testOtpsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Otp{}
	if err = randomize.Struct(seed, o, otpDBTypes, true, otpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Otp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := OtpExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Otp exists: %s", err)
	}
	if !e {
		t.Errorf("Expected OtpExists to return true, but got false.")
	}
}

func testOtpsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Otp{}
	if err = randomize.Struct(seed, o, otpDBTypes, true, otpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Otp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	otpFound, err := FindOtp(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if otpFound == nil {
		t.Error("want a record, got nil")
	}
}

func testOtpsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Otp{}
	if err = randomize.Struct(seed, o, otpDBTypes, true, otpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Otp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Otps().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testOtpsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Otp{}
	if err = randomize.Struct(seed, o, otpDBTypes, true, otpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Otp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Otps().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testOtpsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	otpOne := &Otp{}
	otpTwo := &Otp{}
	if err = randomize.Struct(seed, otpOne, otpDBTypes, false, otpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Otp struct: %s", err)
	}
	if err = randomize.Struct(seed, otpTwo, otpDBTypes, false, otpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Otp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = otpOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = otpTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Otps().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testOtpsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	otpOne := &Otp{}
	otpTwo := &Otp{}
	if err = randomize.Struct(seed, otpOne, otpDBTypes, false, otpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Otp struct: %s", err)
	}
	if err = randomize.Struct(seed, otpTwo, otpDBTypes, false, otpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Otp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = otpOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = otpTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Otps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func otpBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Otp) error {
	*o = Otp{}
	return nil
}

func otpAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Otp) error {
	*o = Otp{}
	return nil
}

func otpAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Otp) error {
	*o = Otp{}
	return nil
}

func otpBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Otp) error {
	*o = Otp{}
	return nil
}

func otpAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Otp) error {
	*o = Otp{}
	return nil
}

func otpBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Otp) error {
	*o = Otp{}
	return nil
}

func otpAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Otp) error {
	*o = Otp{}
	return nil
}

func otpBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Otp) error {
	*o = Otp{}
	return nil
}

func otpAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Otp) error {
	*o = Otp{}
	return nil
}

func testOtpsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Otp{}
	o := &Otp{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, otpDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Otp object: %s", err)
	}

	AddOtpHook(boil.BeforeInsertHook, otpBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	otpBeforeInsertHooks = []OtpHook{}

	AddOtpHook(boil.AfterInsertHook, otpAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	otpAfterInsertHooks = []OtpHook{}

	AddOtpHook(boil.AfterSelectHook, otpAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	otpAfterSelectHooks = []OtpHook{}

	AddOtpHook(boil.BeforeUpdateHook, otpBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	otpBeforeUpdateHooks = []OtpHook{}

	AddOtpHook(boil.AfterUpdateHook, otpAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	otpAfterUpdateHooks = []OtpHook{}

	AddOtpHook(boil.BeforeDeleteHook, otpBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	otpBeforeDeleteHooks = []OtpHook{}

	AddOtpHook(boil.AfterDeleteHook, otpAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	otpAfterDeleteHooks = []OtpHook{}

	AddOtpHook(boil.BeforeUpsertHook, otpBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	otpBeforeUpsertHooks = []OtpHook{}

	AddOtpHook(boil.AfterUpsertHook, otpAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	otpAfterUpsertHooks = []OtpHook{}
}

func testOtpsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Otp{}
	if err = randomize.Struct(seed, o, otpDBTypes, true, otpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Otp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Otps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOtpsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Otp{}
	if err = randomize.Struct(seed, o, otpDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Otp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(otpColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Otps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testOtpsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Otp{}
	if err = randomize.Struct(seed, o, otpDBTypes, true, otpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Otp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOtpsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Otp{}
	if err = randomize.Struct(seed, o, otpDBTypes, true, otpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Otp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := OtpSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testOtpsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Otp{}
	if err = randomize.Struct(seed, o, otpDBTypes, true, otpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Otp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Otps().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	otpDBTypes = map[string]string{`ID`: `int`, `UserID`: `varbinary`, `Secret`: `varchar`, `Created`: `datetime`, `Modified`: `datetime`}
	_          = bytes.MinRead
)

func testOtpsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(otpPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(otpAllColumns) == len(otpPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Otp{}
	if err = randomize.Struct(seed, o, otpDBTypes, true, otpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Otp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Otps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, otpDBTypes, true, otpPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Otp struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testOtpsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(otpAllColumns) == len(otpPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Otp{}
	if err = randomize.Struct(seed, o, otpDBTypes, true, otpColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Otp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Otps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, otpDBTypes, true, otpPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Otp struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(otpAllColumns, otpPrimaryKeyColumns) {
		fields = otpAllColumns
	} else {
		fields = strmangle.SetComplement(
			otpAllColumns,
			otpPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := OtpSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testOtpsUpsert(t *testing.T) {
	t.Parallel()

	if len(otpAllColumns) == len(otpPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLOtpUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Otp{}
	if err = randomize.Struct(seed, &o, otpDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Otp struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Otp: %s", err)
	}

	count, err := Otps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, otpDBTypes, false, otpPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Otp struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Otp: %s", err)
	}

	count, err = Otps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
