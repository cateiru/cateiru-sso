// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testPasskeys(t *testing.T) {
	t.Parallel()

	query := Passkeys()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testPasskeysDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Passkey{}
	if err = randomize.Struct(seed, o, passkeyDBTypes, true, passkeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Passkey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Passkeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPasskeysQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Passkey{}
	if err = randomize.Struct(seed, o, passkeyDBTypes, true, passkeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Passkey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Passkeys().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Passkeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPasskeysSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Passkey{}
	if err = randomize.Struct(seed, o, passkeyDBTypes, true, passkeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Passkey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PasskeySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Passkeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testPasskeysExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Passkey{}
	if err = randomize.Struct(seed, o, passkeyDBTypes, true, passkeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Passkey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := PasskeyExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Passkey exists: %s", err)
	}
	if !e {
		t.Errorf("Expected PasskeyExists to return true, but got false.")
	}
}

func testPasskeysFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Passkey{}
	if err = randomize.Struct(seed, o, passkeyDBTypes, true, passkeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Passkey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	passkeyFound, err := FindPasskey(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if passkeyFound == nil {
		t.Error("want a record, got nil")
	}
}

func testPasskeysBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Passkey{}
	if err = randomize.Struct(seed, o, passkeyDBTypes, true, passkeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Passkey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Passkeys().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testPasskeysOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Passkey{}
	if err = randomize.Struct(seed, o, passkeyDBTypes, true, passkeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Passkey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Passkeys().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testPasskeysAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	passkeyOne := &Passkey{}
	passkeyTwo := &Passkey{}
	if err = randomize.Struct(seed, passkeyOne, passkeyDBTypes, false, passkeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Passkey struct: %s", err)
	}
	if err = randomize.Struct(seed, passkeyTwo, passkeyDBTypes, false, passkeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Passkey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = passkeyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = passkeyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Passkeys().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testPasskeysCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	passkeyOne := &Passkey{}
	passkeyTwo := &Passkey{}
	if err = randomize.Struct(seed, passkeyOne, passkeyDBTypes, false, passkeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Passkey struct: %s", err)
	}
	if err = randomize.Struct(seed, passkeyTwo, passkeyDBTypes, false, passkeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Passkey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = passkeyOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = passkeyTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Passkeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func passkeyBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Passkey) error {
	*o = Passkey{}
	return nil
}

func passkeyAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Passkey) error {
	*o = Passkey{}
	return nil
}

func passkeyAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Passkey) error {
	*o = Passkey{}
	return nil
}

func passkeyBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Passkey) error {
	*o = Passkey{}
	return nil
}

func passkeyAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Passkey) error {
	*o = Passkey{}
	return nil
}

func passkeyBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Passkey) error {
	*o = Passkey{}
	return nil
}

func passkeyAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Passkey) error {
	*o = Passkey{}
	return nil
}

func passkeyBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Passkey) error {
	*o = Passkey{}
	return nil
}

func passkeyAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Passkey) error {
	*o = Passkey{}
	return nil
}

func testPasskeysHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Passkey{}
	o := &Passkey{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, passkeyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Passkey object: %s", err)
	}

	AddPasskeyHook(boil.BeforeInsertHook, passkeyBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	passkeyBeforeInsertHooks = []PasskeyHook{}

	AddPasskeyHook(boil.AfterInsertHook, passkeyAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	passkeyAfterInsertHooks = []PasskeyHook{}

	AddPasskeyHook(boil.AfterSelectHook, passkeyAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	passkeyAfterSelectHooks = []PasskeyHook{}

	AddPasskeyHook(boil.BeforeUpdateHook, passkeyBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	passkeyBeforeUpdateHooks = []PasskeyHook{}

	AddPasskeyHook(boil.AfterUpdateHook, passkeyAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	passkeyAfterUpdateHooks = []PasskeyHook{}

	AddPasskeyHook(boil.BeforeDeleteHook, passkeyBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	passkeyBeforeDeleteHooks = []PasskeyHook{}

	AddPasskeyHook(boil.AfterDeleteHook, passkeyAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	passkeyAfterDeleteHooks = []PasskeyHook{}

	AddPasskeyHook(boil.BeforeUpsertHook, passkeyBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	passkeyBeforeUpsertHooks = []PasskeyHook{}

	AddPasskeyHook(boil.AfterUpsertHook, passkeyAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	passkeyAfterUpsertHooks = []PasskeyHook{}
}

func testPasskeysInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Passkey{}
	if err = randomize.Struct(seed, o, passkeyDBTypes, true, passkeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Passkey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Passkeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPasskeysInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Passkey{}
	if err = randomize.Struct(seed, o, passkeyDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Passkey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(passkeyColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Passkeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testPasskeysReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Passkey{}
	if err = randomize.Struct(seed, o, passkeyDBTypes, true, passkeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Passkey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPasskeysReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Passkey{}
	if err = randomize.Struct(seed, o, passkeyDBTypes, true, passkeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Passkey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := PasskeySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testPasskeysSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Passkey{}
	if err = randomize.Struct(seed, o, passkeyDBTypes, true, passkeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Passkey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Passkeys().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	passkeyDBTypes = map[string]string{`ID`: `int`, `UserID`: `varbinary`, `Credential`: `text`, `PublicKey`: `text`, `IsBackupState`: `tinyint`, `Created`: `datetime`, `Modified`: `datetime`}
	_              = bytes.MinRead
)

func testPasskeysUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(passkeyPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(passkeyAllColumns) == len(passkeyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Passkey{}
	if err = randomize.Struct(seed, o, passkeyDBTypes, true, passkeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Passkey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Passkeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, passkeyDBTypes, true, passkeyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Passkey struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testPasskeysSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(passkeyAllColumns) == len(passkeyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Passkey{}
	if err = randomize.Struct(seed, o, passkeyDBTypes, true, passkeyColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Passkey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Passkeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, passkeyDBTypes, true, passkeyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Passkey struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(passkeyAllColumns, passkeyPrimaryKeyColumns) {
		fields = passkeyAllColumns
	} else {
		fields = strmangle.SetComplement(
			passkeyAllColumns,
			passkeyPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := PasskeySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testPasskeysUpsert(t *testing.T) {
	t.Parallel()

	if len(passkeyAllColumns) == len(passkeyPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLPasskeyUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Passkey{}
	if err = randomize.Struct(seed, &o, passkeyDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Passkey struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Passkey: %s", err)
	}

	count, err := Passkeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, passkeyDBTypes, false, passkeyPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Passkey struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Passkey: %s", err)
	}

	count, err = Passkeys().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
