// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserBrands(t *testing.T) {
	t.Parallel()

	query := UserBrands()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserBrandsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBrand{}
	if err = randomize.Struct(seed, o, userBrandDBTypes, true, userBrandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBrand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserBrands().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserBrandsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBrand{}
	if err = randomize.Struct(seed, o, userBrandDBTypes, true, userBrandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBrand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserBrands().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserBrands().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserBrandsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBrand{}
	if err = randomize.Struct(seed, o, userBrandDBTypes, true, userBrandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBrand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserBrandSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserBrands().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserBrandsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBrand{}
	if err = randomize.Struct(seed, o, userBrandDBTypes, true, userBrandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBrand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserBrandExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if UserBrand exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserBrandExists to return true, but got false.")
	}
}

func testUserBrandsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBrand{}
	if err = randomize.Struct(seed, o, userBrandDBTypes, true, userBrandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBrand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userBrandFound, err := FindUserBrand(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if userBrandFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserBrandsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBrand{}
	if err = randomize.Struct(seed, o, userBrandDBTypes, true, userBrandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBrand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserBrands().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserBrandsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBrand{}
	if err = randomize.Struct(seed, o, userBrandDBTypes, true, userBrandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBrand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserBrands().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserBrandsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userBrandOne := &UserBrand{}
	userBrandTwo := &UserBrand{}
	if err = randomize.Struct(seed, userBrandOne, userBrandDBTypes, false, userBrandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBrand struct: %s", err)
	}
	if err = randomize.Struct(seed, userBrandTwo, userBrandDBTypes, false, userBrandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBrand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userBrandOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userBrandTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserBrands().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserBrandsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userBrandOne := &UserBrand{}
	userBrandTwo := &UserBrand{}
	if err = randomize.Struct(seed, userBrandOne, userBrandDBTypes, false, userBrandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBrand struct: %s", err)
	}
	if err = randomize.Struct(seed, userBrandTwo, userBrandDBTypes, false, userBrandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBrand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userBrandOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userBrandTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserBrands().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userBrandBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserBrand) error {
	*o = UserBrand{}
	return nil
}

func userBrandAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserBrand) error {
	*o = UserBrand{}
	return nil
}

func userBrandAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserBrand) error {
	*o = UserBrand{}
	return nil
}

func userBrandBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserBrand) error {
	*o = UserBrand{}
	return nil
}

func userBrandAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserBrand) error {
	*o = UserBrand{}
	return nil
}

func userBrandBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserBrand) error {
	*o = UserBrand{}
	return nil
}

func userBrandAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserBrand) error {
	*o = UserBrand{}
	return nil
}

func userBrandBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserBrand) error {
	*o = UserBrand{}
	return nil
}

func userBrandAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserBrand) error {
	*o = UserBrand{}
	return nil
}

func testUserBrandsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserBrand{}
	o := &UserBrand{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userBrandDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserBrand object: %s", err)
	}

	AddUserBrandHook(boil.BeforeInsertHook, userBrandBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userBrandBeforeInsertHooks = []UserBrandHook{}

	AddUserBrandHook(boil.AfterInsertHook, userBrandAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userBrandAfterInsertHooks = []UserBrandHook{}

	AddUserBrandHook(boil.AfterSelectHook, userBrandAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userBrandAfterSelectHooks = []UserBrandHook{}

	AddUserBrandHook(boil.BeforeUpdateHook, userBrandBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userBrandBeforeUpdateHooks = []UserBrandHook{}

	AddUserBrandHook(boil.AfterUpdateHook, userBrandAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userBrandAfterUpdateHooks = []UserBrandHook{}

	AddUserBrandHook(boil.BeforeDeleteHook, userBrandBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userBrandBeforeDeleteHooks = []UserBrandHook{}

	AddUserBrandHook(boil.AfterDeleteHook, userBrandAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userBrandAfterDeleteHooks = []UserBrandHook{}

	AddUserBrandHook(boil.BeforeUpsertHook, userBrandBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userBrandBeforeUpsertHooks = []UserBrandHook{}

	AddUserBrandHook(boil.AfterUpsertHook, userBrandAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userBrandAfterUpsertHooks = []UserBrandHook{}
}

func testUserBrandsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBrand{}
	if err = randomize.Struct(seed, o, userBrandDBTypes, true, userBrandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBrand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserBrands().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserBrandsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBrand{}
	if err = randomize.Struct(seed, o, userBrandDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserBrand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userBrandColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserBrands().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserBrandsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBrand{}
	if err = randomize.Struct(seed, o, userBrandDBTypes, true, userBrandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBrand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserBrandsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBrand{}
	if err = randomize.Struct(seed, o, userBrandDBTypes, true, userBrandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBrand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserBrandSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserBrandsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBrand{}
	if err = randomize.Struct(seed, o, userBrandDBTypes, true, userBrandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBrand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserBrands().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userBrandDBTypes = map[string]string{`ID`: `int`, `UserID`: `varchar`, `BrandID`: `varchar`, `Created`: `datetime`}
	_                = bytes.MinRead
)

func testUserBrandsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userBrandPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userBrandAllColumns) == len(userBrandPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserBrand{}
	if err = randomize.Struct(seed, o, userBrandDBTypes, true, userBrandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBrand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserBrands().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userBrandDBTypes, true, userBrandPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserBrand struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserBrandsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userBrandAllColumns) == len(userBrandPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserBrand{}
	if err = randomize.Struct(seed, o, userBrandDBTypes, true, userBrandColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBrand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserBrands().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userBrandDBTypes, true, userBrandPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserBrand struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userBrandAllColumns, userBrandPrimaryKeyColumns) {
		fields = userBrandAllColumns
	} else {
		fields = strmangle.SetComplement(
			userBrandAllColumns,
			userBrandPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserBrandSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserBrandsUpsert(t *testing.T) {
	t.Parallel()

	if len(userBrandAllColumns) == len(userBrandPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLUserBrandUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserBrand{}
	if err = randomize.Struct(seed, &o, userBrandDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserBrand struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserBrand: %s", err)
	}

	count, err := UserBrands().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userBrandDBTypes, false, userBrandPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserBrand struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserBrand: %s", err)
	}

	count, err = UserBrands().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
