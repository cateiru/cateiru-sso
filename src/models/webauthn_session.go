// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// WebauthnSession is an object representing the database table.
type WebauthnSession struct {
	ID               []byte     `boil:"id" json:"id" toml:"id" yaml:"id"`
	WebauthnUserID   string     `boil:"webauthn_user_id" json:"webauthn_user_id" toml:"webauthn_user_id" yaml:"webauthn_user_id"`
	UserDisplayName  string     `boil:"user_display_name" json:"user_display_name" toml:"user_display_name" yaml:"user_display_name"`
	Challenge        string     `boil:"challenge" json:"challenge" toml:"challenge" yaml:"challenge"`
	UserVerification string     `boil:"user_verification" json:"user_verification" toml:"user_verification" yaml:"user_verification"`
	Row              types.JSON `boil:"row" json:"row" toml:"row" yaml:"row"`
	Period           time.Time  `boil:"period" json:"period" toml:"period" yaml:"period"`
	Created          time.Time  `boil:"created" json:"created" toml:"created" yaml:"created"`
	Modified         time.Time  `boil:"modified" json:"modified" toml:"modified" yaml:"modified"`

	R *webauthnSessionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L webauthnSessionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var WebauthnSessionColumns = struct {
	ID               string
	WebauthnUserID   string
	UserDisplayName  string
	Challenge        string
	UserVerification string
	Row              string
	Period           string
	Created          string
	Modified         string
}{
	ID:               "id",
	WebauthnUserID:   "webauthn_user_id",
	UserDisplayName:  "user_display_name",
	Challenge:        "challenge",
	UserVerification: "user_verification",
	Row:              "row",
	Period:           "period",
	Created:          "created",
	Modified:         "modified",
}

var WebauthnSessionTableColumns = struct {
	ID               string
	WebauthnUserID   string
	UserDisplayName  string
	Challenge        string
	UserVerification string
	Row              string
	Period           string
	Created          string
	Modified         string
}{
	ID:               "webauthn_session.id",
	WebauthnUserID:   "webauthn_session.webauthn_user_id",
	UserDisplayName:  "webauthn_session.user_display_name",
	Challenge:        "webauthn_session.challenge",
	UserVerification: "webauthn_session.user_verification",
	Row:              "webauthn_session.row",
	Period:           "webauthn_session.period",
	Created:          "webauthn_session.created",
	Modified:         "webauthn_session.modified",
}

// Generated where

type whereHelpertypes_JSON struct{ field string }

func (w whereHelpertypes_JSON) EQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_JSON) NEQ(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_JSON) LT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_JSON) LTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_JSON) GT(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_JSON) GTE(x types.JSON) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var WebauthnSessionWhere = struct {
	ID               whereHelper__byte
	WebauthnUserID   whereHelperstring
	UserDisplayName  whereHelperstring
	Challenge        whereHelperstring
	UserVerification whereHelperstring
	Row              whereHelpertypes_JSON
	Period           whereHelpertime_Time
	Created          whereHelpertime_Time
	Modified         whereHelpertime_Time
}{
	ID:               whereHelper__byte{field: "`webauthn_session`.`id`"},
	WebauthnUserID:   whereHelperstring{field: "`webauthn_session`.`webauthn_user_id`"},
	UserDisplayName:  whereHelperstring{field: "`webauthn_session`.`user_display_name`"},
	Challenge:        whereHelperstring{field: "`webauthn_session`.`challenge`"},
	UserVerification: whereHelperstring{field: "`webauthn_session`.`user_verification`"},
	Row:              whereHelpertypes_JSON{field: "`webauthn_session`.`row`"},
	Period:           whereHelpertime_Time{field: "`webauthn_session`.`period`"},
	Created:          whereHelpertime_Time{field: "`webauthn_session`.`created`"},
	Modified:         whereHelpertime_Time{field: "`webauthn_session`.`modified`"},
}

// WebauthnSessionRels is where relationship names are stored.
var WebauthnSessionRels = struct {
}{}

// webauthnSessionR is where relationships are stored.
type webauthnSessionR struct {
}

// NewStruct creates a new relationship struct
func (*webauthnSessionR) NewStruct() *webauthnSessionR {
	return &webauthnSessionR{}
}

// webauthnSessionL is where Load methods for each relationship are stored.
type webauthnSessionL struct{}

var (
	webauthnSessionAllColumns            = []string{"id", "webauthn_user_id", "user_display_name", "challenge", "user_verification", "row", "period", "created", "modified"}
	webauthnSessionColumnsWithoutDefault = []string{"id", "webauthn_user_id", "user_display_name", "challenge", "row"}
	webauthnSessionColumnsWithDefault    = []string{"user_verification", "period", "created", "modified"}
	webauthnSessionPrimaryKeyColumns     = []string{"id"}
	webauthnSessionGeneratedColumns      = []string{}
)

type (
	// WebauthnSessionSlice is an alias for a slice of pointers to WebauthnSession.
	// This should almost always be used instead of []WebauthnSession.
	WebauthnSessionSlice []*WebauthnSession
	// WebauthnSessionHook is the signature for custom WebauthnSession hook methods
	WebauthnSessionHook func(context.Context, boil.ContextExecutor, *WebauthnSession) error

	webauthnSessionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	webauthnSessionType                 = reflect.TypeOf(&WebauthnSession{})
	webauthnSessionMapping              = queries.MakeStructMapping(webauthnSessionType)
	webauthnSessionPrimaryKeyMapping, _ = queries.BindMapping(webauthnSessionType, webauthnSessionMapping, webauthnSessionPrimaryKeyColumns)
	webauthnSessionInsertCacheMut       sync.RWMutex
	webauthnSessionInsertCache          = make(map[string]insertCache)
	webauthnSessionUpdateCacheMut       sync.RWMutex
	webauthnSessionUpdateCache          = make(map[string]updateCache)
	webauthnSessionUpsertCacheMut       sync.RWMutex
	webauthnSessionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var webauthnSessionAfterSelectHooks []WebauthnSessionHook

var webauthnSessionBeforeInsertHooks []WebauthnSessionHook
var webauthnSessionAfterInsertHooks []WebauthnSessionHook

var webauthnSessionBeforeUpdateHooks []WebauthnSessionHook
var webauthnSessionAfterUpdateHooks []WebauthnSessionHook

var webauthnSessionBeforeDeleteHooks []WebauthnSessionHook
var webauthnSessionAfterDeleteHooks []WebauthnSessionHook

var webauthnSessionBeforeUpsertHooks []WebauthnSessionHook
var webauthnSessionAfterUpsertHooks []WebauthnSessionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *WebauthnSession) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range webauthnSessionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *WebauthnSession) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range webauthnSessionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *WebauthnSession) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range webauthnSessionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *WebauthnSession) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range webauthnSessionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *WebauthnSession) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range webauthnSessionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *WebauthnSession) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range webauthnSessionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *WebauthnSession) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range webauthnSessionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *WebauthnSession) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range webauthnSessionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *WebauthnSession) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range webauthnSessionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddWebauthnSessionHook registers your hook function for all future operations.
func AddWebauthnSessionHook(hookPoint boil.HookPoint, webauthnSessionHook WebauthnSessionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		webauthnSessionAfterSelectHooks = append(webauthnSessionAfterSelectHooks, webauthnSessionHook)
	case boil.BeforeInsertHook:
		webauthnSessionBeforeInsertHooks = append(webauthnSessionBeforeInsertHooks, webauthnSessionHook)
	case boil.AfterInsertHook:
		webauthnSessionAfterInsertHooks = append(webauthnSessionAfterInsertHooks, webauthnSessionHook)
	case boil.BeforeUpdateHook:
		webauthnSessionBeforeUpdateHooks = append(webauthnSessionBeforeUpdateHooks, webauthnSessionHook)
	case boil.AfterUpdateHook:
		webauthnSessionAfterUpdateHooks = append(webauthnSessionAfterUpdateHooks, webauthnSessionHook)
	case boil.BeforeDeleteHook:
		webauthnSessionBeforeDeleteHooks = append(webauthnSessionBeforeDeleteHooks, webauthnSessionHook)
	case boil.AfterDeleteHook:
		webauthnSessionAfterDeleteHooks = append(webauthnSessionAfterDeleteHooks, webauthnSessionHook)
	case boil.BeforeUpsertHook:
		webauthnSessionBeforeUpsertHooks = append(webauthnSessionBeforeUpsertHooks, webauthnSessionHook)
	case boil.AfterUpsertHook:
		webauthnSessionAfterUpsertHooks = append(webauthnSessionAfterUpsertHooks, webauthnSessionHook)
	}
}

// One returns a single webauthnSession record from the query.
func (q webauthnSessionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*WebauthnSession, error) {
	o := &WebauthnSession{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for webauthn_session")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all WebauthnSession records from the query.
func (q webauthnSessionQuery) All(ctx context.Context, exec boil.ContextExecutor) (WebauthnSessionSlice, error) {
	var o []*WebauthnSession

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to WebauthnSession slice")
	}

	if len(webauthnSessionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all WebauthnSession records in the query.
func (q webauthnSessionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count webauthn_session rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q webauthnSessionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if webauthn_session exists")
	}

	return count > 0, nil
}

// WebauthnSessions retrieves all the records using an executor.
func WebauthnSessions(mods ...qm.QueryMod) webauthnSessionQuery {
	mods = append(mods, qm.From("`webauthn_session`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`webauthn_session`.*"})
	}

	return webauthnSessionQuery{q}
}

// FindWebauthnSession retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindWebauthnSession(ctx context.Context, exec boil.ContextExecutor, iD []byte, selectCols ...string) (*WebauthnSession, error) {
	webauthnSessionObj := &WebauthnSession{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `webauthn_session` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, webauthnSessionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from webauthn_session")
	}

	if err = webauthnSessionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return webauthnSessionObj, err
	}

	return webauthnSessionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *WebauthnSession) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no webauthn_session provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(webauthnSessionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	webauthnSessionInsertCacheMut.RLock()
	cache, cached := webauthnSessionInsertCache[key]
	webauthnSessionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			webauthnSessionAllColumns,
			webauthnSessionColumnsWithDefault,
			webauthnSessionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(webauthnSessionType, webauthnSessionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(webauthnSessionType, webauthnSessionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `webauthn_session` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `webauthn_session` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `webauthn_session` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, webauthnSessionPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into webauthn_session")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for webauthn_session")
	}

CacheNoHooks:
	if !cached {
		webauthnSessionInsertCacheMut.Lock()
		webauthnSessionInsertCache[key] = cache
		webauthnSessionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the WebauthnSession.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *WebauthnSession) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	webauthnSessionUpdateCacheMut.RLock()
	cache, cached := webauthnSessionUpdateCache[key]
	webauthnSessionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			webauthnSessionAllColumns,
			webauthnSessionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update webauthn_session, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `webauthn_session` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, webauthnSessionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(webauthnSessionType, webauthnSessionMapping, append(wl, webauthnSessionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update webauthn_session row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for webauthn_session")
	}

	if !cached {
		webauthnSessionUpdateCacheMut.Lock()
		webauthnSessionUpdateCache[key] = cache
		webauthnSessionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q webauthnSessionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for webauthn_session")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for webauthn_session")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o WebauthnSessionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), webauthnSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `webauthn_session` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, webauthnSessionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in webauthnSession slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all webauthnSession")
	}
	return rowsAff, nil
}

var mySQLWebauthnSessionUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *WebauthnSession) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no webauthn_session provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(webauthnSessionColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLWebauthnSessionUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	webauthnSessionUpsertCacheMut.RLock()
	cache, cached := webauthnSessionUpsertCache[key]
	webauthnSessionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			webauthnSessionAllColumns,
			webauthnSessionColumnsWithDefault,
			webauthnSessionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			webauthnSessionAllColumns,
			webauthnSessionPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("models: unable to upsert webauthn_session, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`webauthn_session`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `webauthn_session` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(webauthnSessionType, webauthnSessionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(webauthnSessionType, webauthnSessionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "models: unable to upsert for webauthn_session")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(webauthnSessionType, webauthnSessionMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "models: unable to retrieve unique values for webauthn_session")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "models: unable to populate default values for webauthn_session")
	}

CacheNoHooks:
	if !cached {
		webauthnSessionUpsertCacheMut.Lock()
		webauthnSessionUpsertCache[key] = cache
		webauthnSessionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single WebauthnSession record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *WebauthnSession) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no WebauthnSession provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), webauthnSessionPrimaryKeyMapping)
	sql := "DELETE FROM `webauthn_session` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from webauthn_session")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for webauthn_session")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q webauthnSessionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no webauthnSessionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from webauthn_session")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for webauthn_session")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o WebauthnSessionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(webauthnSessionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), webauthnSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `webauthn_session` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, webauthnSessionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from webauthnSession slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for webauthn_session")
	}

	if len(webauthnSessionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *WebauthnSession) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindWebauthnSession(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *WebauthnSessionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := WebauthnSessionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), webauthnSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `webauthn_session`.* FROM `webauthn_session` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, webauthnSessionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in WebauthnSessionSlice")
	}

	*o = slice

	return nil
}

// WebauthnSessionExists checks if the WebauthnSession row exists.
func WebauthnSessionExists(ctx context.Context, exec boil.ContextExecutor, iD []byte) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `webauthn_session` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if webauthn_session exists")
	}

	return exists, nil
}

// Exists checks if the WebauthnSession row exists.
func (o *WebauthnSession) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return WebauthnSessionExists(ctx, exec, o.ID)
}
