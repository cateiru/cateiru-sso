// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testWebauthnSessions(t *testing.T) {
	t.Parallel()

	query := WebauthnSessions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testWebauthnSessionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WebauthnSession{}
	if err = randomize.Struct(seed, o, webauthnSessionDBTypes, true, webauthnSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WebauthnSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := WebauthnSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWebauthnSessionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WebauthnSession{}
	if err = randomize.Struct(seed, o, webauthnSessionDBTypes, true, webauthnSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WebauthnSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := WebauthnSessions().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := WebauthnSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWebauthnSessionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WebauthnSession{}
	if err = randomize.Struct(seed, o, webauthnSessionDBTypes, true, webauthnSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WebauthnSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WebauthnSessionSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := WebauthnSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testWebauthnSessionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WebauthnSession{}
	if err = randomize.Struct(seed, o, webauthnSessionDBTypes, true, webauthnSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WebauthnSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := WebauthnSessionExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if WebauthnSession exists: %s", err)
	}
	if !e {
		t.Errorf("Expected WebauthnSessionExists to return true, but got false.")
	}
}

func testWebauthnSessionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WebauthnSession{}
	if err = randomize.Struct(seed, o, webauthnSessionDBTypes, true, webauthnSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WebauthnSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	webauthnSessionFound, err := FindWebauthnSession(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if webauthnSessionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testWebauthnSessionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WebauthnSession{}
	if err = randomize.Struct(seed, o, webauthnSessionDBTypes, true, webauthnSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WebauthnSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = WebauthnSessions().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testWebauthnSessionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WebauthnSession{}
	if err = randomize.Struct(seed, o, webauthnSessionDBTypes, true, webauthnSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WebauthnSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := WebauthnSessions().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testWebauthnSessionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	webauthnSessionOne := &WebauthnSession{}
	webauthnSessionTwo := &WebauthnSession{}
	if err = randomize.Struct(seed, webauthnSessionOne, webauthnSessionDBTypes, false, webauthnSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WebauthnSession struct: %s", err)
	}
	if err = randomize.Struct(seed, webauthnSessionTwo, webauthnSessionDBTypes, false, webauthnSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WebauthnSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = webauthnSessionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = webauthnSessionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := WebauthnSessions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testWebauthnSessionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	webauthnSessionOne := &WebauthnSession{}
	webauthnSessionTwo := &WebauthnSession{}
	if err = randomize.Struct(seed, webauthnSessionOne, webauthnSessionDBTypes, false, webauthnSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WebauthnSession struct: %s", err)
	}
	if err = randomize.Struct(seed, webauthnSessionTwo, webauthnSessionDBTypes, false, webauthnSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WebauthnSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = webauthnSessionOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = webauthnSessionTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WebauthnSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func webauthnSessionBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *WebauthnSession) error {
	*o = WebauthnSession{}
	return nil
}

func webauthnSessionAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *WebauthnSession) error {
	*o = WebauthnSession{}
	return nil
}

func webauthnSessionAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *WebauthnSession) error {
	*o = WebauthnSession{}
	return nil
}

func webauthnSessionBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *WebauthnSession) error {
	*o = WebauthnSession{}
	return nil
}

func webauthnSessionAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *WebauthnSession) error {
	*o = WebauthnSession{}
	return nil
}

func webauthnSessionBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *WebauthnSession) error {
	*o = WebauthnSession{}
	return nil
}

func webauthnSessionAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *WebauthnSession) error {
	*o = WebauthnSession{}
	return nil
}

func webauthnSessionBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *WebauthnSession) error {
	*o = WebauthnSession{}
	return nil
}

func webauthnSessionAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *WebauthnSession) error {
	*o = WebauthnSession{}
	return nil
}

func testWebauthnSessionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &WebauthnSession{}
	o := &WebauthnSession{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, webauthnSessionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize WebauthnSession object: %s", err)
	}

	AddWebauthnSessionHook(boil.BeforeInsertHook, webauthnSessionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	webauthnSessionBeforeInsertHooks = []WebauthnSessionHook{}

	AddWebauthnSessionHook(boil.AfterInsertHook, webauthnSessionAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	webauthnSessionAfterInsertHooks = []WebauthnSessionHook{}

	AddWebauthnSessionHook(boil.AfterSelectHook, webauthnSessionAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	webauthnSessionAfterSelectHooks = []WebauthnSessionHook{}

	AddWebauthnSessionHook(boil.BeforeUpdateHook, webauthnSessionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	webauthnSessionBeforeUpdateHooks = []WebauthnSessionHook{}

	AddWebauthnSessionHook(boil.AfterUpdateHook, webauthnSessionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	webauthnSessionAfterUpdateHooks = []WebauthnSessionHook{}

	AddWebauthnSessionHook(boil.BeforeDeleteHook, webauthnSessionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	webauthnSessionBeforeDeleteHooks = []WebauthnSessionHook{}

	AddWebauthnSessionHook(boil.AfterDeleteHook, webauthnSessionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	webauthnSessionAfterDeleteHooks = []WebauthnSessionHook{}

	AddWebauthnSessionHook(boil.BeforeUpsertHook, webauthnSessionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	webauthnSessionBeforeUpsertHooks = []WebauthnSessionHook{}

	AddWebauthnSessionHook(boil.AfterUpsertHook, webauthnSessionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	webauthnSessionAfterUpsertHooks = []WebauthnSessionHook{}
}

func testWebauthnSessionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WebauthnSession{}
	if err = randomize.Struct(seed, o, webauthnSessionDBTypes, true, webauthnSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WebauthnSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WebauthnSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWebauthnSessionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WebauthnSession{}
	if err = randomize.Struct(seed, o, webauthnSessionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize WebauthnSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(webauthnSessionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := WebauthnSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testWebauthnSessionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WebauthnSession{}
	if err = randomize.Struct(seed, o, webauthnSessionDBTypes, true, webauthnSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WebauthnSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWebauthnSessionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WebauthnSession{}
	if err = randomize.Struct(seed, o, webauthnSessionDBTypes, true, webauthnSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WebauthnSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := WebauthnSessionSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testWebauthnSessionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &WebauthnSession{}
	if err = randomize.Struct(seed, o, webauthnSessionDBTypes, true, webauthnSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WebauthnSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := WebauthnSessions().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	webauthnSessionDBTypes = map[string]string{`ID`: `varchar`, `WebauthnUserID`: `varbinary`, `UserDisplayName`: `text`, `Challenge`: `text`, `UserVerification`: `varchar`, `Row`: `json`, `Period`: `datetime`, `Created`: `datetime`, `Modified`: `datetime`}
	_                      = bytes.MinRead
)

func testWebauthnSessionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(webauthnSessionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(webauthnSessionAllColumns) == len(webauthnSessionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &WebauthnSession{}
	if err = randomize.Struct(seed, o, webauthnSessionDBTypes, true, webauthnSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WebauthnSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WebauthnSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, webauthnSessionDBTypes, true, webauthnSessionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WebauthnSession struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testWebauthnSessionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(webauthnSessionAllColumns) == len(webauthnSessionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &WebauthnSession{}
	if err = randomize.Struct(seed, o, webauthnSessionDBTypes, true, webauthnSessionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize WebauthnSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := WebauthnSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, webauthnSessionDBTypes, true, webauthnSessionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WebauthnSession struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(webauthnSessionAllColumns, webauthnSessionPrimaryKeyColumns) {
		fields = webauthnSessionAllColumns
	} else {
		fields = strmangle.SetComplement(
			webauthnSessionAllColumns,
			webauthnSessionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := WebauthnSessionSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testWebauthnSessionsUpsert(t *testing.T) {
	t.Parallel()

	if len(webauthnSessionAllColumns) == len(webauthnSessionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}
	if len(mySQLWebauthnSessionUniqueColumns) == 0 {
		t.Skip("Skipping table with no unique columns to conflict on")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := WebauthnSession{}
	if err = randomize.Struct(seed, &o, webauthnSessionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize WebauthnSession struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert WebauthnSession: %s", err)
	}

	count, err := WebauthnSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, webauthnSessionDBTypes, false, webauthnSessionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize WebauthnSession struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert WebauthnSession: %s", err)
	}

	count, err = WebauthnSessions().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
